# handlers.py
import logging
import re
import json
from datetime import datetime, timedelta, time
from typing import List, Optional

import aiohttp
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from telegram.ext import ContextTypes

from database import Database
from gpt_tasks import verify_task_with_gpt  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–ª—è —Ñ–æ—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ç–æ–≤
from config import settings

from zoneinfo import ZoneInfo
APP_TZ = ZoneInfo(getattr(settings, "TIMEZONE", "Europe/Moscow"))

logger = logging.getLogger(__name__)

# ---------------- –£—Ç–∏–ª–∏—Ç—ã ----------------
def _is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞."""
    try:
        if user_id == getattr(settings, "ADMIN_ID", 0):
            return True
        admin_ids = set(getattr(settings, "ADMIN_IDS", []) or [])
        return user_id in admin_ids
    except Exception:
        return False

def _mask_token(s: Optional[str], keep: int = 6) -> str:
    """–ú–∞—Å–∫–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω –≤ –ª–æ–≥–∞—Ö."""
    if not isinstance(s, str):
        return str(s)
    return (s[:keep] + "‚Ä¶") if len(s) > keep else s

# ---------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ----------------
def _make_keyboard(is_workout: bool, user_id: int) -> ReplyKeyboardMarkup:
    rows = []
    if is_workout:
        # –ù–û–í–û–ï: –æ–¥–∏–Ω —Å–Ω–∏–º–æ–∫ —á–µ—Ä–µ–∑ 10‚Äì30 —Å–µ–∫ –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è
        rows.append([
            KeyboardButton(
                "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–æ–¥—Ö–æ–¥",
                web_app=WebAppInfo(
                    url=str(settings.WEBAPP_URL)
                    + "?mode=workout"
                    + "&shots=1"
                    + "&delay_min=10"
                    + "&delay_max=30"
                    + "&verify=home"
                )
            )
        ])
    rows.append([KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å")])

    # –ê–¥–º–∏–Ω—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
    if _is_admin(user_id):
        rows.append([KeyboardButton("üü¢ –°—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∞–¥–º–∏–Ω)"),
                     KeyboardButton("üî¥ –°—Ç–æ–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∞–¥–º–∏–Ω)")])
        rows.append([KeyboardButton("/delete_db"), KeyboardButton("/clear_db")])

    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def days_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["–ø–Ω —Å—Ä –ø—Ç", "–≤—Ç —á—Ç —Å–±", "–ø–Ω-–ø—Ç"],
            ["–∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "—Å–± –≤—Å", "–±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

def time_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["07:00", "08:00", "18:00"],
            ["19:00", "19:30", "20:00"],
            ["–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

def duration_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["30", "45", "60"],
            ["75", "90"],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

def _current_keyboard(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> ReplyKeyboardMarkup:
    active = bool(context.application.bot_data.get("session_active", {}).get(user_id))
    return _make_keyboard(active, user_id)

# ---------------- –ü–∞—Ä—Å–µ—Ä—ã ----------------
WEEKDAYS_MAP = {
    '–ø–Ω': 'mon', '–ø–æ–Ω': 'mon', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'mon',
    '–≤—Ç': 'tue', '–≤—Ç–æ—Ä–Ω–∏–∫': 'tue',
    '—Å—Ä': 'wed', '—Å—Ä–µ–¥–∞': 'wed',
    '—á—Ç': 'thu', '—á–µ—Ç–≤–µ—Ä–≥': 'thu',
    '–ø—Ç': 'fri', '–ø—è—Ç–Ω–∏—Ü–∞': 'fri',
    '—Å–±': 'sat', '—Å—É–±–±–æ—Ç–∞': 'sat',
    '–≤—Å': 'sun', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'sun'
}

ORDERED_DAYS = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']
RU_BY_EN = {'mon': '–ø–Ω', 'tue': '–≤—Ç', 'wed': '—Å—Ä', 'thu': '—á—Ç', 'fri': '–ø—Ç', 'sat': '—Å–±', 'sun': '–≤—Å'}

def _parse_time_hhmm(s: str) -> Optional[time]:
    m = re.search(r'(\d{1,2})[:.](\d{2})', s or "")
    if not m:
        return None
    hh, mm = int(m.group(1)), int(m.group(2))
    if 0 <= hh < 24 and 0 <= mm < 60:
        return time(hour=hh, minute=mm)
    return None

def _parse_days(s: str) -> List[str]:
    s = (s or "").strip().lower()
    if not s or s == "–±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è":
        return []
    if '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å' in s or '–µ–∂–µ–¥–Ω–µ–≤' in s or '–≤—Å–µ –¥–Ω–∏' in s or '–ø–Ω-–≤—Å' in s:
        return ORDERED_DAYS.copy()

    rng = re.search(r'(–ø–Ω|–ø–æ–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±|–≤—Å)\s*-\s*(–ø–Ω|–ø–æ–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±|–≤—Å)', s)
    if rng:
        a, b = WEEKDAYS_MAP[rng.group(1)], WEEKDAYS_MAP[rng.group(2)]
        ia, ib = ORDERED_DAYS.index(a), ORDERED_DAYS.index(b)
        return ORDERED_DAYS[ia:ib+1] if ia <= ib else ORDERED_DAYS[ia:]+ORDERED_DAYS[:ib+1]

    days = []
    for token in re.split(r'[,\s]+', s):
        token = token.strip()
        if token in WEEKDAYS_MAP:
            days.append(WEEKDAYS_MAP[token])
    seen = set()
    uniq = []
    for d in days:
        if d not in seen:
            uniq.append(d)
            seen.add(d)
    return uniq

def _human_days(days: List[str]) -> str:
    if not days:
        return "–±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
    return " ".join(RU_BY_EN[d] for d in days if d in RU_BY_EN)

# ---------------- –§–æ—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ----------------
async def _save_training_photo(user_id: int, photo_bytes: bytes, bot) -> bool:
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ–æ—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ sets –∏ –ø—Ä–æ–≥–æ–Ω—è–µ—Ç GPT-–ø—Ä–æ–≤–µ—Ä–∫—É.
    –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
      ‚Äî —á–µ–ª–æ–≤–µ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (–Ω–µ –ø–æ–∑–∞/—Å–µ–ª—Ñ–∏),
      ‚Äî –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –ø—Ä–∏–∑–Ω–∞–∫–æ–≤ –º–æ–Ω—Ç–∞–∂–∞/—Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤/—Å—Ç–∞—Ä—ã—Ö —Ñ–æ—Ç–æ,
      ‚Äî –î–û–ú (–∫–≤–∞—Ä—Ç–∏—Ä–∞/–∫–æ–º–Ω–∞—Ç–∞/–¥–æ–º/–¥–æ–º–∞—à–Ω–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å), –∞ –Ω–µ –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –∑–∞–ª.
    GPT –¥–æ–ª–∂–µ–Ω –≤–µ—Ä–Ω—É—Ç—å JSON: {"success": bool, "is_home": bool, "reason": string}
    """
    from tempfile import NamedTemporaryFile
    from pathlib import Path

    logger.info("[sets] user=%s: received photo bytes=%d", user_id, len(photo_bytes))

    with NamedTemporaryFile(suffix=".jpg", delete=False) as tmp:
        tmp.write(photo_bytes)
        tmp.flush()
        tmp_path = tmp.name

    try:
        check_text = (
            "–û—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ –∫–∞–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –î–û–ú–ê.\n"
            "–ö—Ä–∏—Ç–µ—Ä–∏–∏:\n"
            "1) –ù–∞ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫ –í–´–ü–û–õ–ù–Ø–ï–¢ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (–∞ –Ω–µ –ø–æ–∑–∏—Ä—É–µ—Ç/—Å–µ–ª—Ñ–∏/–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å).\n"
            "2) –§–æ—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ, –Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –±–µ–∑ –º–æ–Ω—Ç–∞–∂–µ–π.\n"
            "3) –õ–û–ö–ê–¶–ò–Ø: –∂–∏–ª–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ (–∫–≤–∞—Ä—Ç–∏—Ä–∞/–∫–æ–º–Ω–∞—Ç–∞/–¥–æ–º) –∏–ª–∏ –¥–æ–º–∞—à–Ω–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å; "
            "–ù–ï –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –∑–∞–ª/–ø—É–±–ª–∏—á–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä.\n"
            "–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON: {\"success\": bool, \"is_home\": bool, \"reason\": string}."
        )

        logger.info("[sets] user=%s: sending to GPT verify‚Ä¶", user_id)
        gpt = await verify_task_with_gpt(check_text, tmp_path)
        verified = bool(gpt.get("success"))
        is_home = bool(gpt.get("is_home"))
        reason = gpt.get("reason", "")

        if verified and not is_home:
            verified = False
            reason = reason or "–û–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –¥–æ–º–∞—à–Ω—é—é"

        logger.info("[sets] user=%s: GPT result verified=%s is_home=%s reason=%r",
                    user_id, verified, is_home, reason)

        async with Database.acquire() as conn:
            await conn.execute(
                "INSERT INTO sets (user_id, photo, verified, gpt_reason) VALUES ($1, $2, $3, $4)",
                user_id, photo_bytes, verified, reason
            )

        if verified:
            await bot.send_message(chat_id=user_id, text="‚úÖ –§–æ—Ç–æ –∑–∞—Å—á–∏—Ç–∞–Ω–æ (–¥–æ–º).")
        else:
            await bot.send_message(chat_id=user_id, text="‚ùå –ù–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ: " + (reason or "–Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞"))
        return verified
    except Exception as e:
        logger.exception("Photo verify/save failed: %s", e)
        try:
            await bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        except Exception:
            pass
        return False
    finally:
        try:
            Path(tmp_path).unlink(missing_ok=True)
        except Exception:
            pass

# ---------------- –ü–æ–º–æ—â–Ω–∏–∫–∏ —Å–µ—Å—Å–∏–∏ ----------------
def _set_session_active(context: ContextTypes.DEFAULT_TYPE, user_id: int, active: bool) -> None:
    sa = context.application.bot_data.setdefault("session_active", {})
    if active:
        sa[user_id] = True
    else:
        sa.pop(user_id, None)

def _is_session_active(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    return bool(context.application.bot_data.get("session_active", {}).get(user_id))

# ---------------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ----------------
def _shift_days(days_tuple: tuple[int, ...], offset: int) -> tuple[int, ...]:
    """–°–¥–≤–∏–≥ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (0..6) –Ω–∞ offset –≤–ø–µ—Ä—ë–¥, —Å –º–æ–¥—É–ª–µ–º 7."""
    return tuple(((d + offset) % 7) for d in days_tuple)
from zoneinfo import ZoneInfo
APP_TZ = ZoneInfo(getattr(settings, "TIMEZONE", "Europe/Moscow"))

def _schedule_reminders(context: ContextTypes.DEFAULT_TYPE, user_id: int, days: List[str], t: time, dur_min: int) -> None:
    jq = getattr(context.application, "job_queue", None)
    if jq is None:
        logger.warning("JobQueue is not available; skipping reminders for user %s", user_id)
        return

    # –°–Ω–æ—Å–∏–º —Å—Ç–∞—Ä—ã–µ –¥–∂–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        for job in jq.jobs():
            if (job.name or "").startswith(f"{user_id}:"):
                job.schedule_removal()
    except Exception as e:
        logger.exception("Failed to list/remove jobs: %s", e)

    if not days:
        logger.info("[sched] user=%s: no days, skip scheduling", user_id)
        return

    # tz-aware –≤—Ä–µ–º—è –≤ APP_TZ
    t_z = time(t.hour, t.minute, t.second, t.microsecond, tzinfo=APP_TZ)
    base_dt = datetime.combine(datetime.now(APP_TZ).date(), t_z)
    mid_time = (base_dt + timedelta(minutes=max(dur_min // 2, 1))).timetz()
    end_time = (base_dt + timedelta(minutes=dur_min)).timetz()

    # PTB: –ü–ù=0 ... –í–°=6
    day_index = {'mon': 0, 'tue': 1, 'wed': 2, 'thu': 3, 'fri': 4, 'sat': 5, 'sun': 6}
    valid_days_raw = tuple(day_index[d] for d in days if d in day_index)

    # –í–ê–® –°–î–í–ò–ì: ¬´–¥–µ–Ω—å —Ä–∞–Ω—å—à–µ¬ª
    valid_days = _shift_days(valid_days_raw, 1)

    # –ï—Å–ª–∏ —Å–µ—Ä–µ–¥–∏–Ω–∞/–∫–æ–Ω–µ—Ü —É—Ö–æ–¥—è—Ç –∑–∞ –ø–æ–ª–Ω–æ—á—å ‚Äî –ø–µ—Ä–µ–Ω–æ—Å–∏–º –Ω–∞ —Å–ª–µ–¥. –¥–µ–Ω—å
    days_start = valid_days
    days_mid = valid_days if (mid_time > t_z) else _shift_days(valid_days, 1)
    days_end = valid_days if (end_time > t_z) else _shift_days(valid_days, 1)

    logger.info("[sched] user=%s: start=%s mid=%s end=%s tz=%s days_start=%s days_mid=%s days_end=%s dur=%s",
                user_id, t_z, mid_time, end_time, APP_TZ, days_start, days_mid, days_end, dur_min)

    async def start_cb(ctx: ContextTypes.DEFAULT_TYPE):
        _set_session_active(ctx, user_id, True)
        try:
            await ctx.bot.send_message(
                chat_id=user_id,
                text="üèÅ –°—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏! –ñ–º–∏ ¬´‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–æ–¥—Ö–æ–¥¬ª. –§–æ—Ç–æ —Å–¥–µ–ª–∞—é —á–µ—Ä–µ–∑ 10‚Äì30 —Å–µ–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                reply_markup=_make_keyboard(True, user_id)
            )
        except Exception as e:
            logger.exception("Failed to send START reminder to %s: %s", user_id, e)

    async def mid_cb(ctx: ContextTypes.DEFAULT_TYPE):
        _set_session_active(ctx, user_id, True)
        try:
            await ctx.bot.send_message(
                chat_id=user_id,
                text="‚è≥ –°–µ—Ä–µ–¥–∏–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–π –ø–æ–¥—Ö–æ–¥. ¬´‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–æ–¥—Ö–æ–¥¬ª (—Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ 10‚Äì30 —Å–µ–∫).",
                reply_markup=_make_keyboard(True, user_id)
            )
        except Exception as e:
            logger.exception("Failed to send MID reminder to %s: %s", user_id, e)

    async def end_cb(ctx: ContextTypes.DEFAULT_TYPE):
        _set_session_active(ctx, user_id, False)
        try:
            await ctx.bot.send_message(
                chat_id=user_id,
                text="‚úÖ –ö–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ.",
                reply_markup=_make_keyboard(False, user_id)
            )
        except Exception as e:
            logger.exception("Failed to send END reminder to %s: %s", user_id, e)

    if not valid_days:
        logger.info("[sched] user=%s: valid_days empty, skip scheduling", user_id)
        return

    jq.run_daily(start_cb, time=t_z,      days=days_start, name=f"{user_id}:start")
    jq.run_daily(mid_cb,   time=mid_time, days=days_mid,   name=f"{user_id}:mid")
    jq.run_daily(end_cb,   time=end_time, days=days_end,   name=f"{user_id}:end")

    for job in jq.jobs():
        if (job.name or "").startswith(f"{user_id}:"):
            logger.info("[sched] %s next_run=%s", job.name, job.next_run_time)

# –ü–æ–¥—Ö–≤–∞—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏–∑ –ë–î –∏ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∂–æ–±–æ–≤
async def _reschedule_from_db(update_or_context, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    try:
        async with Database.acquire() as conn:
            row = await conn.fetchrow(
                """
                SELECT reminder_enabled, reminder_days, reminder_time, workout_duration
                  FROM users
                 WHERE user_id = $1
                """,
                user_id
            )
        if not row:
            logger.info("[sched] user=%s: no user row", user_id)
            return
        if not row["reminder_enabled"]:
            jq = getattr(context.application, "job_queue", None)
            if jq:
                for job in jq.jobs():
                    if (job.name or "").startswith(f"{user_id}:"):
                        job.schedule_removal()
            _set_session_active(context, user_id, False)
            logger.info("[sched] user=%s: reminders disabled, jobs removed", user_id)
            return

        days = list(row["reminder_days"] or [])
        rtime: Optional[time] = row["reminder_time"]
        dur = int(row["workout_duration"] or 60)
        logger.info("[sched] user=%s: reschedule days=%s time=%s dur=%s", user_id, days, rtime, dur)
        if rtime:
            _schedule_reminders(context, user_id, days, rtime, dur)
    except Exception as e:
        logger.exception("_reschedule_from_db failed for user %s: %s", user_id, e)

# ---------------- –•–µ–Ω–¥–ª–µ—Ä—ã ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è = —Ç–æ–ª—å–∫–æ –º–∞—Å—Ç–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è. –ö–∞–º–µ—Ä–∞ –Ω–µ –Ω—É–∂–Ω–∞."""
    message = update.message or update.callback_query.message
    user = update.effective_user

    async with Database.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT user_id, reminder_enabled FROM users WHERE user_id=$1",
            user.id
        )
        if not row:
            await conn.execute(
                """
                INSERT INTO users (user_id, username, first_name, last_name)
                VALUES ($1,$2,$3,$4)
                ON CONFLICT (user_id) DO NOTHING
                """,
                user.id, user.username, user.first_name, user.last_name
            )
            row = {"reminder_enabled": False}
            logger.info("[start] user=%s: created user row", user.id)

    if not (row.get("reminder_enabled") if isinstance(row, dict) else row["reminder_enabled"]):
        context.user_data.clear()
        context.user_data["awaiting_reminder_days"] = True
        await message.reply_text(
            "üóìÔ∏è –í –∫–∞–∫–∏–µ –¥–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è? –ú–æ–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É –∏–ª–∏ –≤–ø–∏—Å–∞—Ç—å:\n"
            "‚Ä¢ ¬´–ø–Ω —Å—Ä –ø—Ç¬ª  ‚Ä¢ ¬´–≤—Ç —á—Ç —Å–±¬ª  ‚Ä¢ ¬´–ø–Ω-–ø—Ç¬ª  ‚Ä¢ ¬´–∫–∞–∂–¥—ã–π –¥–µ–Ω—å¬ª  ‚Ä¢ ¬´—Å–± –≤—Å¬ª  ‚Ä¢ ¬´–±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è¬ª",
            reply_markup=_make_keyboard(False, user.id),
        )
        await message.reply_text("–í—ã–±–µ—Ä–∏ –¥–Ω–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", reply_markup=days_keyboard())
        return

    await _reschedule_from_db(update, context, user.id)
    await message.reply_text(
        "–ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ.",
        reply_markup=_current_keyboard(context, user.id)
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–æ—É—Ç–µ—Ä –º–∞—Å—Ç–µ—Ä–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è + –∞–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–∏."""
    message = update.message
    if not message or not message.text:
        await (update.effective_message or message).reply_text(
            "–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=_current_keyboard(context, update.effective_user.id)
        )
        return

    msg = message.text.strip()
    low = msg.lower()
    user = update.effective_user

    # –ê–¥–º–∏–Ω: —Ä—É—á–Ω–æ–π —Å—Ç–∞—Ä—Ç/—Å—Ç–æ–ø —Ä–µ–∂–∏–º–∞
    if _is_admin(user.id):
        if low in ("üü¢ —Å—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∞–¥–º–∏–Ω)", "—Å—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "üü¢ —Å—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "/start_workout"):
            _set_session_active(context, user.id, True)
            logger.info("[admin] user=%s: manual START workout", user.id)
            await message.reply_text("üöÄ –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤–∫–ª—é—á—ë–Ω (–∞–¥–º–∏–Ω). –ñ–º–∏ ¬´‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–æ–¥—Ö–æ–¥¬ª. –§–æ—Ç–æ —Å–¥–µ–ª–∞—é —á–µ—Ä–µ–∑ 10‚Äì30 —Å–µ–∫.",
                                     reply_markup=_make_keyboard(True, user.id))
            return
        if low in ("üî¥ —Å—Ç–æ–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∞–¥–º–∏–Ω)", "—Å—Ç–æ–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "üî¥ —Å—Ç–æ–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "/end_workout"):
            _set_session_active(context, user.id, False)
            logger.info("[admin] user=%s: manual STOP workout", user.id)
            await message.reply_text("üõë –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω (–∞–¥–º–∏–Ω).",
                                     reply_markup=_make_keyboard(False, user.id))
            return

    # –ú–∞—Å—Ç–µ—Ä: —à–∞–≥ –¥–Ω–∏
    if context.user_data.get("awaiting_reminder_days"):
        days = _parse_days(msg)
        logger.info("[wizard] user=%s: days parsed=%s", user.id, days)

        # –±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ‚Äî –æ—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if not days:
            async with Database.acquire() as conn:
                await conn.execute(
                    """
                    UPDATE users
                       SET reminder_enabled = FALSE,
                           reminder_days = $2,
                           reminder_time = NULL,
                           workout_duration = NULL
                     WHERE user_id = $1
                    """,
                    user.id, days
                )
            await _reschedule_from_db(update, context, user.id)
            _set_session_active(context, user.id, False)
            context.user_data.clear()
            await message.reply_text(
                "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ö–æ–≥–¥–∞ –Ω–∞—á–Ω—ë—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä—É–π—Å—è.",
                reply_markup=_make_keyboard(False, user.id)
            )
            return

        context.user_data["reminder_days"] = days
        context.user_data.pop("awaiting_reminder_days", None)
        context.user_data["awaiting_reminder_time"] = True
        await message.reply_text(
            "‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä 07:00, 19:30 –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É.",
            reply_markup=time_keyboard()
        )
        return

    # –ú–∞—Å—Ç–µ—Ä: —à–∞–≥ –≤—Ä–µ–º—è
    if context.user_data.get("awaiting_reminder_time"):
        if low == "–¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è":
            await message.reply_text(
                "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 19:30.",
                reply_markup=time_keyboard()
            )
            return

        t = _parse_time_hhmm(msg)
        if not t:
            await message.reply_text(
                "–ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00).",
                reply_markup=time_keyboard()
            )
            return
        context.user_data["reminder_time"] = t
        context.user_data.pop("awaiting_reminder_time", None)

        context.user_data["awaiting_reminder_duration"] = True
        await message.reply_text(
            "‚è±Ô∏è –í–≤–µ–¥–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (5‚Äì240) –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É.",
            reply_markup=duration_keyboard()
        )
        return

    # –ú–∞—Å—Ç–µ—Ä: —à–∞–≥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    if context.user_data.get("awaiting_reminder_duration"):
        digits = re.findall(r"\d+", msg)
        if not digits:
            await message.reply_text(
                "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (–æ—Ç 5 –¥–æ 240), –Ω–∞–ø—Ä–∏–º–µ—Ä: 5, 30, 95.",
                reply_markup=duration_keyboard()
            )
            return
        dur = int(digits[0])
        if not (5 <= dur <= 240):
            await message.reply_text(
                "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ—Ç 5 –¥–æ 240 –º–∏–Ω—É—Ç. –í–≤–µ–¥–∏ —á–∏—Å–ª–æ –≤ —ç—Ç–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ.",
                reply_markup=duration_keyboard()
            )
            return

        context.user_data["workout_duration"] = dur
        context.user_data.pop("awaiting_reminder_duration", None)

        days = context.user_data.get("reminder_days", [])
        t = context.user_data.get("reminder_time")

        async with Database.acquire() as conn:
            await conn.execute(
                """
                UPDATE users
                   SET reminder_enabled = TRUE,
                       reminder_days = $2,
                       reminder_time = $3,
                       workout_duration = $4
                 WHERE user_id = $1
                """,
                user.id, days, t, dur
            )

        _schedule_reminders(context, user.id, days, t, dur)
        context.user_data.clear()

        await message.reply_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.\n"
            f"–î–Ω–∏: {_human_days(days)}\n"
            f"–í—Ä–µ–º—è: {t.strftime('%H:%M')}\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {dur} –º–∏–Ω.",
            reply_markup=_make_keyboard(False, user.id)  # –∫–Ω–æ–ø–∫–∞ –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å—Ç–∞—Ä—Ç–µ –∏–ª–∏ –ø–æ –∞–¥–º–∏–Ω-—Å—Ç–∞—Ä—Ç—É
        )
        return

    # –ü—Ä–æ—á–µ–µ
    if low in ("–ø—Ä–æ—Ñ–∏–ª—å", "üìä –ø—Ä–æ—Ñ–∏–ª—å"):
        await profile(update, context)
        return

    await message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                             reply_markup=_current_keyboard(context, user.id))

async def reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–Ø–≤–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π."""
    message = update.message or update.callback_query.message
    context.user_data.clear()
    context.user_data["awaiting_reminder_days"] = True
    await message.reply_text(
        "üóìÔ∏è –û–±–Ω–æ–≤–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –í –∫–∞–∫–∏–µ –¥–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è?\n"
        "‚Ä¢ ¬´–ø–Ω —Å—Ä –ø—Ç¬ª  ‚Ä¢ ¬´–≤—Ç —á—Ç —Å–±¬ª  ‚Ä¢ ¬´–ø–Ω-–ø—Ç¬ª  ‚Ä¢ ¬´–∫–∞–∂–¥—ã–π –¥–µ–Ω—å¬ª  ‚Ä¢ ¬´—Å–± –≤—Å¬ª  ‚Ä¢ ¬´–±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è¬ª",
        reply_markup=days_keyboard(),
    )

# ---------------- –ü—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp ----------------
async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """
    –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º:
      1) –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç:  {"type":"workout_set","tokens":["t1"], "timestamps":[...]}  # –û–î–ù–û —Ñ–æ—Ç–æ (–Ω–æ–≤—ã–π —Ä–µ–∂–∏–º)
      2) –ü–æ—Ç–æ–∫–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è: {"type":"single_photo_uploaded","token":"t1"} / {"type":"set_photo_uploaded","token":"t1"}
      3) (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å) —Ç—Ä–∏ —Ñ–æ—Ç–æ: {"type":"workout_set","tokens":["t1","t2","t3"], "window":180, "timestamps":[...]}
    """
    if not update.message or not update.message.web_app_data:
        return
    try:
        raw = update.message.web_app_data.data
        logger.info("[webapp] raw length=%s", len(raw) if raw is not None else None)
        payload = json.loads(raw)
    except Exception:
        logger.exception("[webapp] failed to parse web_app_data JSON")
        return

    ptype = str(payload.get("type"))

    # --- –ü–æ—Ç–æ–∫–æ–≤–æ–µ –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: —Å—Ä–∞–∑—É –ø—Ä–æ–≤–µ—Ä—è–µ–º 1 —Ñ–æ—Ç–æ ---
    if ptype in ("single_photo_uploaded", "set_photo_uploaded"):
        user = update.effective_user
        token = payload.get("token") or payload.get("t") or payload.get("id")
        if not token:
            logger.warning("[webapp] user=%s %s without token", user.id, ptype)
            return
        logger.info("[webapp] user=%s single upload token=%s", user.id, _mask_token(token))

        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        try:
            async with aiohttp.ClientSession() as sess:
                pull_url = settings.make_pull_url(token)
                async with sess.get(pull_url, timeout=30) as r:
                    if r.status != 200:
                        raise RuntimeError(f"HTTP {r.status}")
                    photo_bytes = await r.read()
            logger.info("[webapp] user=%s single photo size=%d", user.id, len(photo_bytes))
        except Exception as e:
            logger.exception("[webapp] user=%s fail pull single photo token=%s: %s", user.id, _mask_token(token), e)
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ç–æ
        ok = await _save_training_photo(user.id, photo_bytes, context.bot)
        if ok:
            await update.message.reply_text("üèÜ –ü–æ–¥—Ö–æ–¥ –∑–∞—Å—á–∏—Ç–∞–Ω (1 —Ñ–æ—Ç–æ).")
        else:
            await update.message.reply_text("‚ùå –ü–æ–¥—Ö–æ–¥ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω (1 —Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É).")
        return

    # --- –§–∏–Ω–∞–ª—å–Ω—ã–π –ø–∞–∫–µ—Ç ---
    if ptype != "workout_set":
        logger.info("[webapp] skip payload type=%r", ptype)
        return

    user = update.effective_user
    tokens = payload.get("tokens") or payload.get("photos") or []
    window = int(payload.get("window") or 180)
    ts = payload.get("timestamps") or []

    logger.info("[webapp] user=%s type=workout_set window=%s tokens=%s ts_count=%s",
                user.id, window, [_mask_token(t) for t in tokens], (len(ts) if isinstance(ts, list) else 0))

    # –ù–æ–≤—ã–π —Ä–µ–∂–∏–º: –æ–¥–Ω–æ —Ñ–æ—Ç–æ –≤–Ω—É—Ç—Ä–∏ workout_set
    if len(tokens) == 1:
        token = tokens[0]
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        try:
            async with aiohttp.ClientSession() as sess:
                pull_url = settings.make_pull_url(token)
                async with sess.get(pull_url, timeout=30) as r:
                    if r.status != 200:
                        raise RuntimeError(f"HTTP {r.status}")
                    photo_bytes = await r.read()
            logger.info("[webapp] user=%s single-in-set photo size=%d", user.id, len(photo_bytes))
        except Exception as e:
            logger.exception("[webapp] user=%s fail pull single-in-set token=%s: %s", user.id, _mask_token(token), e)
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        ok = await _save_training_photo(user.id, photo_bytes, context.bot)
        if ok:
            await update.message.reply_text("üèÜ –ü–æ–¥—Ö–æ–¥ –∑–∞—Å—á–∏—Ç–∞–Ω (1 —Ñ–æ—Ç–æ).")
        else:
            await update.message.reply_text("‚ùå –ü–æ–¥—Ö–æ–¥ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω (1 —Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–æ –ø—Ä–æ–≤–µ—Ä–∫—É).")
        return

    # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å: —Å—Ç–∞—Ä—ã–π —Ä–µ–∂–∏–º –Ω–∞ 3 —Ñ–æ—Ç–æ
    if len(tokens) != 3:
        await update.message.reply_text("‚ö†Ô∏è –û–∂–∏–¥–∞—é –∏–ª–∏ 1 —Ñ–æ—Ç–æ, –∏–ª–∏ 3 —Ñ–æ—Ç–æ.")
        logger.warning("[webapp] user=%s wrong tokens count=%s", user.id, len(tokens))
        return

    # 3 —Ñ–æ—Ç–æ ‚Äî —Å—Ç–∞—Ä—ã–π –ø—É—Ç—å
    photos_bytes: List[bytes] = []
    async with aiohttp.ClientSession() as sess:
        for idx, tok in enumerate(tokens, start=1):
            try:
                pull_url = settings.make_pull_url(tok)
                async with sess.get(pull_url, timeout=30) as r:
                    status = r.status
                    if status != 200:
                        logger.warning("[webapp] user=%s photo %d/%d token=%s HTTP %s",
                                       user.id, idx, len(tokens), _mask_token(tok), status)
                        raise RuntimeError(f"HTTP {status}")
                    data = await r.read()
                    photos_bytes.append(data)
                    logger.info("[webapp] user=%s photo %d/%d token=%s size=%d",
                                user.id, idx, len(tokens), _mask_token(tok), len(data))
            except Exception as e:
                logger.exception("[webapp] user=%s fail pull photo %d/%d token=%s: %s",
                                 user.id, idx, len(tokens), _mask_token(tok), e)
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
                return

    logger.info("[webapp] user=%s all photos pulled count=%d", user.id, len(photos_bytes))

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç—Ä–µ—Ç–µ–π (–µ—Å–ª–∏ timestamps –µ—Å—Ç—å)
    thirds_ok = True
    if isinstance(ts, list) and len(ts) == 3:
        def _to_ts(x):
            try:
                if isinstance(x, (int, float)):
                    return float(x)
                return datetime.fromisoformat(str(x).replace("Z", "+00:00")).timestamp()
            except Exception:
                return None

        t_vals = list(map(_to_ts, ts))
        if any(v is None for v in t_vals):
            thirds_ok = False
            logger.info("[webapp] user=%s thirds check: timestamps parse failed %r", user.id, ts)
        else:
            t_vals.sort()
            total = t_vals[-1] - t_vals[0]
            if total <= 0:
                thirds_ok = False
                logger.info("[webapp] user=%s thirds check: non-positive total=%s", user.id, total)
            else:
                target_segment = window / 3.0
                tol = max(10.0, target_segment * 0.4)
                d1 = t_vals[1] - t_vals[0]
                d2 = t_vals[2] - t_vals[1]
                thirds_ok = (abs(d1 - target_segment) <= tol) and (abs(d2 - target_segment) <= tol)
                logger.info("[webapp] user=%s thirds d1=%.2f d2=%.2f target=%.2f tol=%.2f -> thirds_ok=%s",
                            user.id, d1, d2, target_segment, tol, thirds_ok)

    results = []
    for i, pb in enumerate(photos_bytes, start=1):
        ok = await _save_training_photo(user.id, pb, context.bot)
        results.append(ok)
        logger.info("[webapp] user=%s photo %d verify=%s", user.id, i, ok)

    logger.info("[webapp] user=%s set summary results=%s thirds_ok=%s", user.id, results, thirds_ok)

    if all(results) and thirds_ok:
        await update.message.reply_text("üèÜ –ü–æ–¥—Ö–æ–¥ –∑–∞—Å—á–∏—Ç–∞–Ω: 3/3 —Ñ–æ—Ç–æ, –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ç—Ä–µ—Ç–∏ –∏ –¥–æ–º–∞—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞.")
    elif all(results) and not thirds_ok:
        await update.message.reply_text("‚úÖ –§–æ—Ç–æ –æ–∫, –Ω–æ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Ç—Ä–µ—Ç–µ–π –Ω–µ —Å–æ–≤–ø–∞–ª–∏ —Å –æ–∫–Ω–æ–º. –ü–æ—Å—Ç–∞—Ä–∞–π—Å—è –¥–µ—Ä–∂–∞—Ç—å —Ä–∞–≤–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã.")
    else:
        passed = sum(1 for x in results if x)
        tip = "" if thirds_ok else " –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã —Ç—Ä–µ—Ç–µ–π –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã"
        await update.message.reply_text(f"‚ùå –ü–æ–¥—Ö–æ–¥ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω: {passed}/3 —Ñ–æ—Ç–æ –ø—Ä–æ—à–ª–æ{tip}.")

# ---------------- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ----------------
async def delete_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not _is_admin(user.id):
        await update.effective_message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=_current_keyboard(context, user.id))
        return
    try:
        await Database.drop()
        await Database.init()
        jq = getattr(context.application, "job_queue", None)
        if jq:
            for job in jq.jobs():
                job.schedule_removal()
        context.application.bot_data["session_active"] = {}
        await update.effective_message.reply_text("üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞.", reply_markup=_make_keyboard(False, user.id))
        logger.info("[admin] user=%s: /delete_db done", user.id)
    except Exception as e:
        logger.exception("/delete_db failed: %s", e)
        await update.effective_message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ë–î.", reply_markup=_make_keyboard(False, user.id))

async def clear_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not _is_admin(user.id):
        await update.effective_message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=_current_keyboard(context, user.id))
        return
    try:
        async with Database.acquire() as conn:
            try:
                await conn.execute("TRUNCATE TABLE tasks RESTART IDENTITY CASCADE")
            except Exception:
                pass
            try:
                await conn.execute("TRUNCATE TABLE sets RESTART IDENTITY CASCADE")
            except Exception:
                pass
            try:
                await conn.execute(
                    """
                    UPDATE users
                       SET reminder_enabled = FALSE,
                           reminder_days = ARRAY[]::text[],
                           reminder_time = NULL,
                           workout_duration = NULL
                    """
                )
            except Exception:
                pass

        jq = getattr(context.application, "job_queue", None)
        if jq:
            for job in jq.jobs():
                job.schedule_removal()
        context.application.bot_data["session_active"] = {}

        await update.effective_message.reply_text("üßπ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã —É –≤—Å–µ—Ö.", reply_markup=_make_keyboard(False, user.id))
        logger.info("[admin] user=%s: /clear_db done", user.id)
    except Exception as e:
        logger.exception("/clear_db failed: %s", e)
        await update.effective_message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=_make_keyboard(False, user.id))

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞/—Å—Ç–æ–ø–∞
async def start_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not _is_admin(user.id):
        await update.effective_message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=_current_keyboard(context, user.id))
        return
    _set_session_active(context, user.id, True)
    logger.info("[admin] user=%s: /start_workout", user.id)
    await update.effective_message.reply_text("üöÄ –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤–∫–ª—é—á—ë–Ω (–∞–¥–º–∏–Ω). –ñ–º–∏ ¬´‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å –ø–æ–¥—Ö–æ–¥¬ª. –§–æ—Ç–æ —Å–¥–µ–ª–∞—é —á–µ—Ä–µ–∑ 10‚Äì30 —Å–µ–∫.",
                                              reply_markup=_make_keyboard(True, user.id))

async def end_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not _is_admin(user.id):
        await update.effective_message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=_current_keyboard(context, user.id))
        return
    _set_session_active(context, user.id, False)
    logger.info("[admin] user=%s: /end_workout", user.id)
    await update.effective_message.reply_text("üõë –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω (–∞–¥–º–∏–Ω).",
                                              reply_markup=_make_keyboard(False, user.id))

# ---------------- –ü—Ä–æ—Ñ–∏–ª—å ----------------
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    user = update.effective_user

    total_tasks = 0
    completed_tasks = 0
    reminder_enabled = False
    days = []
    rtime: Optional[time] = None
    duration = None

    try:
        async with Database.acquire() as conn:
            try:
                row_stats = await conn.fetchrow(
                    """
                    SELECT COUNT(*) AS total,
                           SUM(CASE WHEN status='completed' THEN 1 ELSE 0 END) AS completed
                      FROM tasks
                     WHERE user_id = $1
                    """,
                    user.id
                )
                if row_stats:
                    total_tasks = int(row_stats["total"] or 0)
                    completed_tasks = int(row_stats["completed"] or 0)
            except Exception:
                pass  # —Ç–∞–±–ª–∏—Ü—ã –º–æ–∂–µ—Ç –Ω–µ –±—ã—Ç—å ‚Äî –æ–∫

            row_user = await conn.fetchrow(
                """
                SELECT reminder_enabled, reminder_days, reminder_time, workout_duration
                  FROM users
                 WHERE user_id = $1
                """,
                user.id
            )
            if row_user:
                reminder_enabled = bool(row_user["reminder_enabled"])
                days = list(row_user["reminder_days"] or [])
                rtime = row_user["reminder_time"]
                duration = row_user["workout_duration"]

    except Exception as e:
        logger.exception("profile() failed: %s", e)

    percent = 0
    if total_tasks:
        percent = int((completed_tasks / total_tasks) * 100) if total_tasks else 0

    now_local = datetime.now(APP_TZ)
    tz_label = getattr(APP_TZ, "key", str(APP_TZ))  # Europe/Moscow
    today_line = now_local.strftime(f"–°–µ–≥–æ–¥–Ω—è: %Y-%m-%d (%A) %H:%M ({tz_label})")

    text = [
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å @{user.username or user.id}",
        today_line,  # ‚Üê –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞
        f"–ó–∞–¥–∞—á: {total_tasks}, –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed_tasks} ({percent}%)",
        "",
        "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: " + ("–≤–∫–ª—é—á–µ–Ω—ã" if reminder_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã"),
        "–î–Ω–∏: " + _human_days(days),
        "–í—Ä–µ–º—è: " + (rtime.strftime('%H:%M') if rtime else "‚Äî"),
        "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: " + (f"{duration} –º–∏–Ω." if duration else "‚Äî"),
        "",
        "–†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: " + ("–∞–∫—Ç–∏–≤–µ–Ω" if _is_session_active(context, user.id) else "–≤—ã–∫–ª—é—á–µ–Ω"),
    ]
    await message.reply_text("\n".join(text), reply_markup=_current_keyboard(context, user.id))
