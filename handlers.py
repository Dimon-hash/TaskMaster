import logging
import re
import json
import html  # ‚úÖ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π HTML-–≤—ã–≤–æ–¥
from datetime import datetime, timedelta, time, date, timezone as dt_timezone
from typing import List, Optional, Dict, Tuple
from io import BytesIO
from pathlib import Path

from urllib.parse import urlencode, urlparse
import ipaddress

import aiohttp
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    WebAppInfo,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    Message,
    InputMediaPhoto,
    InputFile,
)
from telegram.ext import ContextTypes
from telegram.error import BadRequest  # ‚úÖ –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã

from database import Database
from gpt_tasks import verify_task_with_gpt
from config import settings

from zoneinfo import ZoneInfo
APP_TZ = ZoneInfo(getattr(settings, "TIMEZONE", "Europe/Moscow"))

logger = logging.getLogger(__name__)

# ======================= –ö–≠–®/–°–ï–°–°–ò–ò/–¢–ê–ô–ú–ó–û–ù–´ =======================
REST_CACHE: dict[int, int] = {}            # user_id -> rest_seconds (–¥–ª—è URL WebApp)
WORKOUT_WINDOW_CACHE: dict[int, int] = {}  # user_id -> seconds (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–∫–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏)
TZ_CACHE: dict[int, ZoneInfo] = {}         # user_id -> ZoneInfo
REGISTERED_CACHE: set[int] = set()

def _set_registered(user_id: int, ok: bool) -> None:
    if ok:
        REGISTERED_CACHE.add(user_id)
    else:
        REGISTERED_CACHE.discard(user_id)

def _is_registered(user_id: int) -> bool:
    return user_id in REGISTERED_CACHE

def _get_rest_seconds_cached(user_id: int) -> int:
    return int(REST_CACHE.get(user_id, 60))

def _set_rest_seconds_cached(user_id: int, seconds: int) -> None:
    REST_CACHE[user_id] = max(1, int(seconds))

def _get_window_seconds_cached(user_id: int) -> int:
    return int(WORKOUT_WINDOW_CACHE.get(user_id, 3600))

def _set_window_seconds_cached(user_id: int, seconds: int) -> None:
    WORKOUT_WINDOW_CACHE[user_id] = max(60, int(seconds))

def _set_tz_for(user_id: int, tz_name: Optional[str]) -> None:
    try:
        tz = ZoneInfo(tz_name) if tz_name else APP_TZ
    except Exception:
        tz = APP_TZ
    TZ_CACHE[user_id] = tz
def _parse_deposit_from_text(s: str, default: int = 5000) -> int:
    m = re.search(r"\d{2,6}", (s or "").replace(" ", ""))
    if not m:
        return _clamp_deposit(default)
    return _clamp_deposit(int(m.group(0)))

def _tz_for(user_id: int) -> ZoneInfo:
    return TZ_CACHE.get(user_id, APP_TZ)

def _ws_get(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> dict:
    all_ws = context.application.bot_data.setdefault("workout_session", {})
    ws = all_ws.get(user_id)
    if not ws:
        ws = {"expected": 3, "results": [], "started_at": datetime.now(_tz_for(user_id))}
        all_ws[user_id] = ws
    return ws

def _ws_reset(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    context.application.bot_data.setdefault("workout_session", {}).pop(user_id, None)

# ---------------- –£—Ç–∏–ª–∏—Ç—ã ----------------
def _is_admin(user_id: int) -> bool:
    try:
        return user_id in set(getattr(settings, "ADMIN_IDS", []))
    except Exception:
        return False

def _extract_image_file_id_from_message(message) -> Optional[str]:
    if not message:
        return None
    if getattr(message, "photo", None):
        return message.photo[-1].file_id
    doc = getattr(message, "document", None)
    if doc and (doc.mime_type or "").startswith("image/"):
        return doc.file_id
    return None

# ‚úÖ –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–∏–≥–Ω–æ—Ä ¬´Message is not modified¬ª)
from typing import Optional  # –µ—Å–ª–∏ –Ω–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–ª

async def _safe_edit_reply_markup(message: Message, reply_markup: Optional[InlineKeyboardMarkup]) -> None:
    try:
        await message.edit_reply_markup(reply_markup=reply_markup)
    except BadRequest as e:
        if "Message is not modified" in str(e):
            return
        raise

# ‚úÖ –§–ò–ö–°: –Ω–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ, –∞ –∫ telegram.CallbackQuery.answer
async def _safe_cq_answer(cq, text: Optional[str] = None, **kwargs) -> None:
    try:
        await cq.answer(text=text, **kwargs)
    except BadRequest as e:
        s = str(e)
        if ("Query is too old" in s) or ("query id is invalid" in s) or ("response timeout expired" in s):
            return
        raise

# ---------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã (–≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é) ----------------
from urllib.parse import urlencode, urlparse  # (–æ–±—ä–µ–¥–∏–Ω–∏–ª –∏–º–ø–æ—Ä—Ç)

def _is_private_host(netloc: str) -> bool:
    host = (netloc or "").split(":", 1)[0].lower()
    if host == "localhost":
        return True
    try:
        ip = ipaddress.ip_address(host)
        return ip.is_private or ip.is_loopback
    except ValueError:
        # –¥–æ–º–µ–Ω–Ω–æ–µ –∏–º—è ‚Äî —Å—á–∏—Ç–∞–µ–º –ø—É–±–ª–∏—á–Ω—ã–º
        return False
def _webapp_base() -> str:
    """
    –ò—Å—Ç–æ—á–Ω–∏–∫ –ø—Ä–∞–≤–¥—ã ‚Äî settings.WEBAPP_ORIGIN (–Ω–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç—Å—è –≤ config.py).
    –õ–æ–∫–∞–ª—å–Ω–æ ‚Äî http://127.0.0.1:8000
    –ù–∏—á–µ–≥–æ –Ω–µ —Ñ–æ—Ä—Å–∏–º –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –ª–æ–≤–∏—Ç—å SSL-–æ—à–∏–±–∫–∏.
    """
    # –µ—Å–ª–∏ –µ—Å—Ç—å WEBAPP_ORIGIN ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë (–æ–Ω–∞ —É–∂–µ –±–µ–∑ –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ /)
    origin = getattr(settings, "WEBAPP_ORIGIN", None)
    if origin:
        return str(origin).rstrip("/")

    # –∏–Ω–∞—á–µ fallback –Ω–∞ —Å–≤–æ–π—Å—Ç–≤–æ WEBAPP_URL (–≤ –Ω—ë–º –µ—Å—Ç—å –∑–∞–≤–µ—Ä—à–∞—é—â–∏–π /)
    base = str(getattr(settings, "WEBAPP_URL", "http://127.0.0.1:8000/")).strip().rstrip("/")
    # –µ—Å–ª–∏ –≤–¥—Ä—É–≥ –ø—Ä–∏—à–ª–æ –±–µ–∑ —Å—Ö–µ–º—ã ‚Äî –¥–æ–±–∞–≤–∏–º http
    if not base.startswith(("http://", "https://")):
        base = "http://" + base

    # –µ—Å–ª–∏ —Ö–æ—Å—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å (http)
    pr = urlparse(base)
    if _is_private_host(pr.netloc):
        return base

    # –ø—É–±–ª–∏—á–Ω—ã–π —Ö–æ—Å—Ç: –Ω–µ –Ω–∞—Å–∏–ª—É–µ–º —Å—Ö–µ–º—É, –±–µ—Ä—ë–º —Ç—É, —á—Ç–æ —É–∂–µ —Å—Ç–æ–∏—Ç
    return base

def _build_webapp_url(params: dict) -> str:
    return _webapp_base() + "/?" + urlencode(params, safe=":/?&=,+@")

async def _build_workout_keyboard(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> ReplyKeyboardMarkup:
    # —á–∏—Ç–∞–µ–º rest/window –∏–∑ –∫—ç—à–∞
    rest_sec = _get_rest_seconds_cached(user_id)
    window_sec = _get_window_seconds_cached(user_id)

    # —Ç–∞—â–∏–º –ø–ª–∞–Ω –∏–∑ training_form
    plan_text = None
    plan_video = None
    try:
        async with Database.acquire() as conn:
            row = await conn.fetchrow("SELECT training_form FROM users WHERE user_id=$1", user_id)
        tf = _load_training_form(row.get("training_form") if row else None) or {}
        plan_text = (tf.get("workout_text") or "").strip() or None
        plan_video = (tf.get("workout_video_url") or "").strip() or None
    except Exception:
        pass

    # —Å–æ–±–∏—Ä–∞–µ–º querystring –±–µ–∑–æ–ø–∞—Å–Ω–æ
    params = {
        "mode": "workout",
        "shots": "3",
        "rest": str(rest_sec),
        "window": str(window_sec),
        "verify": "home",
    }
    if plan_text:
        params["plan_text"] = plan_text[:800]
    if plan_video:
        params["plan_video"] = plan_video[:500]

    url = _build_webapp_url(params)
    rows = [[KeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É", web_app=WebAppInfo(url=url))]]

    rows.append([KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å")] if _is_registered(user_id) else [KeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")])

    if _is_admin(user_id):
        rows.append([KeyboardButton("üü¢ –°—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∞–¥–º–∏–Ω)"),
                     KeyboardButton("üî¥ –°—Ç–æ–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∞–¥–º–∏–Ω)")])
        rows.append([KeyboardButton("/delete_db"), KeyboardButton("/clear_db")])
        rows.append([KeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ")])

    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def _make_keyboard(is_workout: bool, user_id: int) -> ReplyKeyboardMarkup:
    rows = []
    if is_workout:
        rest_sec = _get_rest_seconds_cached(user_id)
        window_sec = _get_window_seconds_cached(user_id)
        rows.append([
            KeyboardButton(
                "‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É",
                web_app=WebAppInfo(
                    url=_build_webapp_url({
                        "mode": "workout",
                        "shots": "3",
                        "rest": str(rest_sec),
                        "window": str(window_sec),
                        "verify": "home",
                    })
                )
            )

        ])
    if _is_registered(user_id):
        rows.append([KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å")])
    else:
        rows.append([KeyboardButton("üìù –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")])

    if _is_admin(user_id):
        rows.append([KeyboardButton("üü¢ –°—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∞–¥–º–∏–Ω)"),
                     KeyboardButton("üî¥ –°—Ç–æ–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∞–¥–º–∏–Ω)")])
        rows.append([KeyboardButton("/delete_db"), KeyboardButton("/clear_db")])
        rows.append([KeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ")])

    return ReplyKeyboardMarkup(rows, resize_keyboard=True)
# –ü—É—Ç–∏ –∫ –ª–æ–∫–∞–ª—å–Ω—ã–º –∫–∞—Ä—Ç–∏–Ω–∫–∞–º
ASSET_IMG_1 = Path("assets/onboarding/01_runner.png")
ASSET_IMG_2 = Path("assets/onboarding/02_icons.png")

async def _send_local_photo_or_text(bot, chat_id, img_path: Path, caption: str,
                                    parse_mode: str = "Markdown", reply_markup=None):
    """–ï—Å–ª–∏ —Ñ–∞–π–ª –µ—Å—Ç—å ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º —Ñ–æ—Ç–æ —Å –ø–æ–¥–ø–∏—Å—å—é, –∏–Ω–∞—á–µ –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç."""
    try:
        if img_path.exists():
            with img_path.open("rb") as f:
                await bot.send_photo(chat_id=chat_id, photo=f, caption=caption,
                                     parse_mode=parse_mode, reply_markup=reply_markup)
        else:
            await bot.send_message(chat_id=chat_id, text=caption,
                                   parse_mode=parse_mode, reply_markup=reply_markup)
    except Exception:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π fallback –≤ —Ç–µ–∫—Å—Ç
        await bot.send_message(chat_id=chat_id, text=caption,
                               parse_mode=parse_mode, reply_markup=reply_markup)

# ---------------- –ò–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏ –∑–∞–ª–æ–≥–∞/–¥–µ–ø–æ–∑–∏—Ç–∞ ----------------
def _deposit_complete_kb(chosen: str | None = None, locked: bool = False) -> InlineKeyboardMarkup:
    def btn(text: str, cb: str):
        mark = "‚úÖ " if (chosen == cb) else ""
        data = "dep_locked" if locked else cb
        return InlineKeyboardButton(f"{mark}{text}", callback_data=data)
    rows = [
        [btn("üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–º–æ—Ä–æ–∑–∫—É", "depwin_repeat")],
        [btn("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ª–æ–≥", "depwin_change_amount")],
        [btn("üóì –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", "depwin_change_sched")],
        [btn("‚úñÔ∏è –ü–æ–∑–∂–µ", "depwin_later")],
    ]
    return InlineKeyboardMarkup(rows)

def _deposit_forfeit_kb(chosen: Optional[str] = None, locked: bool = False) -> InlineKeyboardMarkup:
    def btn(text: str, cb: str):
        mark = "‚úÖ " if (chosen == cb) else ""
        data = "dep_locked" if locked else cb
        return InlineKeyboardButton(f"{mark}{text}", callback_data=data)
    rows = [
        [btn("üîÅ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ",      "depforf_restart")],
        [btn("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ª–æ–≥",     "depwin_change_amount")],
        [btn("üóì –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ","depwin_change_sched")],
        [btn("‚úñÔ∏è –ü–æ–∑–∂–µ",              "depwin_later")],
    ]
    return InlineKeyboardMarkup(rows)

# ---------------- –ü—Ä–æ—á–∏–µ —É—Ç–∏–ª–∏—Ç—ã ----------------
def _h(x: Optional[str]) -> str:
    return html.escape(str(x)) if x is not None else ""

def days_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["–ø–Ω —Å—Ä –ø—Ç", "–≤—Ç —á—Ç —Å–±", "–ø–Ω-–ø—Ç"],
            ["–∫–∞–∂–¥—ã–π –¥–µ–Ω—å", "—Å–± –≤—Å", "–±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

def time_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["07:00", "08:00", "18:00"],
            ["19:00", "19:30", "20:00"],
            ["–î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è"],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

def rest_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["30 —Å–µ–∫", "60 —Å–µ–∫", "90 —Å–µ–∫"],
            ["120 —Å–µ–∫", "180 —Å–µ–∫"],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

def duration_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["30", "45", "60"],
            ["75", "90"],
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

def _current_keyboard(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> ReplyKeyboardMarkup:
    active = bool(context.application.bot_data.get("session_active", {}).get(user_id))
    return _make_keyboard(active, user_id)

# ---------------- –ü–∞—Ä—Å–µ—Ä—ã ----------------
WEEKDAYS_MAP = {
    '–ø–Ω': 'mon', '–ø–æ–Ω': 'mon', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'mon',
    '–≤—Ç': 'tue', '–≤—Ç–æ—Ä–Ω–∏–∫': 'tue',
    '—Å—Ä': 'wed', '—Å—Ä–µ–¥–∞': 'wed',
    '—á—Ç': 'thu', '—á–µ—Ç–≤–µ—Ä–≥': 'thu',
    '–ø—Ç': 'fri', '–ø—è—Ç–Ω–∏—Ü–∞': 'fri',
    '—Å–±': 'sat', '—Å—É–±–±–æ—Ç–∞': 'sat',
    '–≤—Å': 'sun', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'sun'
}
ORDERED_DAYS = ['mon', 'tue', 'wed', 'thu', 'fri', 'sat', 'sun']
RU_BY_EN = {'mon': '–ø–Ω', 'tue': '–≤—Ç', 'wed': '—Å—Ä', 'thu': '—á—Ç', 'fri': '–ø—Ç', 'sat': '—Å–±', 'sun': '–≤—Å'}

RU_FULL_TO_EN = {
    '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'mon', '–≤—Ç–æ—Ä–Ω–∏–∫': 'tue', '—Å—Ä–µ–¥–∞': 'wed',
    '—á–µ—Ç–≤–µ—Ä–≥': 'thu', '–ø—è—Ç–Ω–∏—Ü–∞': 'fri', '—Å—É–±–±–æ—Ç–∞': 'sat', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'sun',
}
EN_TO_RU_FULL = {v: k.capitalize() for k, v in RU_FULL_TO_EN.items()}

def _parse_time_hhmm(s: str) -> Optional[time]:
    m = re.search(r'(\d{1,2})[:.](\d{2})', s or "")
    if not m:
        return None
    hh, mm = int(m.group(1)), int(m.group(2))
    if 0 <= hh < 24 and 0 <= mm < 60:
        return time(hour=hh, minute=mm)
    return None

def _parse_days(s: str) -> List[str]:
    s = (s or "").strip().lower()
    if not s or s == "–±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è":
        return []
    if '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å' in s or '–µ–∂–µ–¥–Ω–µ–≤' in s or '–≤—Å–µ –¥–Ω–∏' in s or '–ø–Ω-–≤—Å' in s:
        return ORDERED_DAYS.copy()
    rng = re.search(r'(–ø–Ω|–ø–æ–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±|–≤—Å)\s*-\s*(–ø–Ω|–ø–æ–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±|–≤—Å)', s)
    if rng:
        a, b = WEEKDAYS_MAP[rng.group(1)], WEEKDAYS_MAP[rng.group(2)]
        ia, ib = ORDERED_DAYS.index(a), ORDERED_DAYS.index(b)
        return ORDERED_DAYS[ia:ib+1] if ia <= ib else ORDERED_DAYS[ia:]+ORDERED_DAYS[:ib+1]
    days = []
    for token in re.split(r'[,\s]+', s):
        token = token.strip()
        if token in WEEKDAYS_MAP:
            days.append(WEEKDAYS_MAP[token])
    seen = set()
    uniq = []
    for d in days:
        if d not in seen:
            uniq.append(d)
            seen.add(d)
    return uniq

def _human_days(days: List[str]) -> str:
    if not days:
        return "–±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"
    return " ".join(RU_BY_EN.get(d, d) for d in days)

def _parse_rest_seconds(s: str) -> Optional[int]:
    s = (s or "").strip().lower()
    if not s:
        return None
    if re.match(r"^\d{1,2}[:.]\d{1,2}$", s):  # mm:ss
        mm, ss = re.split(r"[:.]", s)
        return int(mm) * 60 + int(ss)
    m = re.search(r"\d+", s)
    if not m:
        return None
    val = int(m.group(0))
    if "–º–∏–Ω" in s:
        return max(1, val * 60)
    return max(1, val)

def _parse_duration_minutes(s: str) -> Optional[int]:
    s = (s or "").strip().lower()
    if not s:
        return None
    m = re.search(r"\d{1,3}", s)
    if not m:
        return None
    val = int(m.group(0))
    if not (5 <= val <= 240):
        return None
    return val

# ---------------- –•–µ–ª–ø–µ—Ä—ã —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è/—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è ----------------
def _human_schedule_lines(per_day_time: Dict[str, str],
                          per_day_duration: Optional[Dict[str, int]] = None) -> List[str]:
    lines = []
    for d in ORDERED_DAYS:
        if d not in per_day_time:
            continue
        ru = EN_TO_RU_FULL.get(d, d)
        hhmm = per_day_time[d]
        if per_day_duration and d in per_day_duration:
            lines.append(f"‚Ä¢ {ru} ‚Äî {hhmm} √ó {per_day_duration[d]} –º–∏–Ω")
        else:
            lines.append(f"‚Ä¢ {ru} ‚Äî {hhmm}")
    return lines

def _progress_bar(done: int, total: int, width: int = 20) -> str:
    if total <= 0:
        return "‚Äî"
    p = max(0, min(100, int(done * 100 / total)))
    filled = (p * width) // 100
    return "‚ñ∞" * filled + "‚ñ±" * (width - filled)

def _add_minutes_to_time(t: time, minutes: int, tz: ZoneInfo) -> Tuple[time, int]:
    base = datetime.combine(date(2000, 1, 3), time(t.hour, t.minute, t.second, t.microsecond, tzinfo=tz))
    dt2 = base + timedelta(minutes=minutes)
    day_shift = (dt2.date() - base.date()).days
    return dt2.timetz(), day_shift

# ===== helper: –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ —á—Ç–µ–Ω–∏–µ training_form –∏–∑ –ë–î (str|dict) =====
def _load_training_form(tf_raw) -> Dict:
    if isinstance(tf_raw, dict):
        return tf_raw or {}
    if isinstance(tf_raw, str) and tf_raw.strip():
        try:
            return json.loads(tf_raw)
        except Exception:
            return {}
    return {}

def _format_deposit_status(tf: dict, tz: ZoneInfo) -> str:
    dep = tf.get("deposit")
    if dep is None:
        return "‚Ä¢ –ó–∞–ª–æ–≥: ‚Äî"

    dep = int(dep or 0)
    forfeited = bool(tf.get("deposit_forfeit"))
    left = int(tf.get("deposit_left") or 0)
    reason = (tf.get("deposit_forfeit_reason") or "").strip()
    forfeited_at = tf.get("deposit_forfeit_at")

    if forfeited:
        when = ""
        if forfeited_at:
            try:
                dt = datetime.fromisoformat(forfeited_at)
                if dt.tzinfo is None:
                    dt = dt.replace(tzinfo=dt_timezone.utc)
                when = dt.astimezone(tz).strftime("%Y-%m-%d %H:%M")
            except Exception:
                when = forfeited_at
        base = f"‚Ä¢ –ó–∞–ª–æ–≥: —Å–ø–∏—Å–∞–Ω {dep} ‚ÇΩ"
        if when:
            base += f" ‚Äî {html.escape(when)}"
        if reason:
            base += f" (–ø—Ä–∏—á–∏–Ω–∞: {html.escape(reason)})"
        return base

    if left and left != dep:
        return f"‚Ä¢ –ó–∞–ª–æ–≥: {dep} ‚ÇΩ (–æ—Å—Ç–∞–ª–æ—Å—å {left} ‚ÇΩ)"
    return f"‚Ä¢ –ó–∞–ª–æ–≥: {dep} ‚ÇΩ (–Ω–∞ –∫–æ–Ω—É)"

# ---------------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ----------------
def _clear_user_jobs(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    jq = getattr(context.application, "job_queue", None)
    if jq:
        try:
            for job in jq.jobs():
                if (job.name or "").startswith(f"{user_id}:"):
                    job.schedule_removal()
        except Exception as e:
            logger.exception("Failed to list/remove jobs: %s", e)

async def clear_my_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not _is_admin(user.id):
        await update.effective_message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.",
            reply_markup=_current_keyboard(context, user.id))
        return
    try:
        async with Database.acquire() as conn:
            try:
                await conn.execute("DELETE FROM tasks WHERE user_id=$1", user.id)
            except Exception:
                pass
            try:
                await conn.execute("DELETE FROM sets  WHERE user_id=$1", user.id)
            except Exception:
                pass
            await conn.execute(
                """
                UPDATE users
                   SET reminder_enabled = FALSE,
                       reminder_days = ARRAY[]::text[],
                       reminder_time = NULL,
                       workout_duration = NULL,
                       rest_seconds = 60,
                       training_form = NULL
                 WHERE user_id = $1
                """,
                user.id
            )

        _clear_user_jobs(context, user.id)
        _set_session_active(context, user.id, False)
        REST_CACHE.pop(user.id, None)
        WORKOUT_WINDOW_CACHE.pop(user.id, None)

        await update.effective_message.reply_text(
            "‚úÖ –¢–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã.",
            reply_markup=_make_keyboard(False, user.id)
        )
    except Exception as e:
        logger.exception("clear_my_data failed: %s", e)
        await update.effective_message.reply_text(
            "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Ç–≤–æ–∏—Ö –¥–∞–Ω–Ω—ã—Ö.",
            reply_markup=_make_keyboard(False, user.id)
        )

def _schedule_reminders_per_day(context: ContextTypes.DEFAULT_TYPE,
                                user_id: int,
                                per_day_time: Dict[str, str],
                                per_day_duration: Optional[Dict[str, int]] = None,
                                default_duration_min: int = 60) -> None:
    jq = getattr(context.application, "job_queue", None)
    if jq is None:
        logger.warning("JobQueue is not available; skipping reminders for user %s", user_id)
        return

    _clear_user_jobs(context, user_id)
    if not per_day_time:
        return

    tz = _tz_for(user_id)
    day_idx = {'mon': 0, 'tue': 1, 'wed': 2, 'thu': 3, 'fri': 4, 'sat': 5, 'sun': 6}

    for d in ORDERED_DAYS:
        if d not in per_day_time or d not in day_idx:
            continue

        hhmm = per_day_time[d]
        t = _parse_time_hhmm(hhmm)
        if not t:
            logger.warning("[sched] skip day=%s invalid time=%r", d, hhmm)
            continue
        t_z = time(t.hour, t.minute, t.second, t.microsecond, tzinfo=tz)

        dur = int((per_day_duration or {}).get(d, default_duration_min))
        if dur < 1:
            dur = default_duration_min

        mid_t, mid_shift = _add_minutes_to_time(t_z, max(dur // 2, 1), tz)
        end_t, end_shift = _add_minutes_to_time(t_z, dur, tz)

        base_day = (day_idx[d]+1) % 7
        mid_day = (base_day + mid_shift) % 7
        end_day = (base_day + end_shift) % 7

        async def start_cb(ctx: ContextTypes.DEFAULT_TYPE, uid=user_id):
            _set_session_active(ctx, uid, True)
            _ws_reset(ctx, uid)
            _ws_get(ctx, uid)

            dep_amt = 0
            try:
                async with Database.acquire() as conn:
                    row = await conn.fetchrow("SELECT training_form FROM users WHERE user_id=$1", uid)
                tf = _load_training_form(row.get("training_form") if row else None) or {}
                if not tf.get("deposit_forfeit"):
                    left = int(tf.get("deposit_left") or 0)
                    dep_amt = left if left > 0 else int(tf.get("deposit") or 0)
            except Exception:
                dep_amt = 0

            intro_line = "üèÅ –°—Ç–∞—Ä—Ç –æ–∫–Ω–∞! –ñ–º–∏ ¬´‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É¬ª."
            money_line = f"\nüí∏ –ù–∞ –∫–æ–Ω—É: {dep_amt} ‚ÇΩ. –ù–∞—á–Ω–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç, –∏–Ω–∞—á–µ –¥–µ–Ω—å–≥–∏ —Å–ø–∏—à—É—Ç—Å—è." if dep_amt > 0 else ""

            kb = await _build_workout_keyboard(ctx, uid)

            try:
                await ctx.bot.send_message(
                    chat_id=uid,
                    text=f"{intro_line}{money_line}\n–ë—É–¥–µ—Ç 3 —Å–Ω–∏–º–∫–∞ —Å –ø–∞—É–∑–∞–º–∏ –æ—Ç–¥—ã—Ö–∞.",
                    reply_markup=kb
                )
            except Exception:
                logger.exception("Failed to send START reminder")

            jq = getattr(ctx.application, "job_queue", None)
            if jq:
                for job in jq.jobs():
                    if (job.name or "") == f"{uid}:nostart":
                        job.schedule_removal()

                async def _no_start_job(_ctx: ContextTypes.DEFAULT_TYPE) -> None:
                    try:
                        cur_ws = _ws_get(_ctx, uid)
                        started = len(cur_ws.get("results", [])) > 0
                        if (not started) and _is_session_active(_ctx, uid):
                            await _forfeit_deposit(_ctx, uid, "–Ω–µ –Ω–∞—á–∞–ª —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ —Ç–µ—á–µ–Ω–∏–µ 5 –º–∏–Ω—É—Ç")
                            _set_session_active(_ctx, uid, False)
                    except Exception as e:
                        logger.exception("_no_start_job failed: %s", e)

                jq.run_once(_no_start_job, when=timedelta(minutes=5), name=f"{uid}:nostart")

        async def mid_cb(ctx: ContextTypes.DEFAULT_TYPE, uid=user_id):
            _set_session_active(ctx, uid, True)
            try:
                await ctx.bot.send_message(
                    chat_id=uid,
                    text="‚è≥ –°–µ—Ä–µ–¥–∏–Ω–∞ ‚Äî –¥–µ—Ä–∂–∏ —Ç–µ–º–ø. –ï—Å–ª–∏ –µ—â—ë –Ω–µ –Ω–∞—á–∞–ª, –∂–º–∏ ¬´‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É¬ª.",
                    reply_markup=_make_keyboard(True, uid)
                )
            except Exception:
                logger.exception("Failed to send MID reminder")

        async def end_cb(ctx: ContextTypes.DEFAULT_TYPE, uid=user_id):
            _set_session_active(ctx, uid, False)
            try:
                await ctx.bot.send_message(
                    chat_id=uid,
                    text="‚úÖ –ö–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–æ–≥–æ –æ–∫–Ω–∞.",
                    reply_markup=_make_keyboard(False, uid)
                )
            except Exception:
                logger.exception("Failed to send END reminder")

        jq.run_daily(start_cb, time=t_z,   days=(base_day,), name=f"{user_id}:{d}:start")
        jq.run_daily(mid_cb,   time=mid_t, days=(mid_day,),  name=f"{user_id}:{d}:mid")
        jq.run_daily(end_cb,   time=end_t, days=(end_day,),  name=f"{user_id}:{d}:end")

# ---------------- –ü–æ–º–æ—â–Ω–∏–∫–∏ —Å–µ—Å—Å–∏–∏ ----------------
def _set_session_active(context: ContextTypes.DEFAULT_TYPE, user_id: int, active: bool) -> None:
    sa = context.application.bot_data.setdefault("session_active", {})
    if active:
        sa[user_id] = True
    else:
        sa.pop(user_id, None)

def _is_session_active(context: ContextTypes.DEFAULT_TYPE, user_id: int) -> bool:
    return bool(context.application.bot_data.get("session_active", {}).get(user_id))

async def _reschedule_from_db(update_or_context, context: ContextTypes.DEFAULT_TYPE, user_id: int) -> None:
    try:
        async with Database.acquire() as conn:
            row = await conn.fetchrow(
                """
                SELECT reminder_enabled, reminder_days, reminder_time, workout_duration, rest_seconds, training_form, timezone
                  FROM users
                 WHERE user_id = $1
                """,
                user_id
            )
        if not row:
            return

        tz_name = row.get("timezone") or getattr(settings, "TIMEZONE", "Europe/Moscow")
        _set_tz_for(user_id, tz_name)

        _set_rest_seconds_cached(user_id, int((row.get("rest_seconds") or 60)))

        if not row["reminder_enabled"]:
            _clear_user_jobs(context, user_id)
            _set_session_active(context, user_id, False)
            return

        default_dur = int(row.get("workout_duration") or 60)
        _set_window_seconds_cached(user_id, default_dur * 60)

        tf = _load_training_form(row.get("training_form"))
        per_day_time = tf.get("per_day_time") or {}
        per_day_duration = tf.get("per_day_duration") or None

        if per_day_time:
            _schedule_reminders_per_day(context, user_id, per_day_time, per_day_duration, default_duration_min=default_dur)
        _set_registered(user_id, bool(per_day_time))
    except Exception as e:
        logger.exception("_reschedule_from_db failed: %s", e)

# ---------------- –ó–∞–ª–æ–≥: —Å–ø–∏—Å–∞–Ω–∏–µ ----------------
async def _forfeit_deposit(context: ContextTypes.DEFAULT_TYPE, user_id: int, reason: str) -> None:
    try:
        async with Database.acquire() as conn:
            row = await conn.fetchrow("SELECT training_form FROM users WHERE user_id=$1", user_id)
        tf = _load_training_form(row.get("training_form") if row else None) or {}

        if tf.get("deposit_forfeit"):
            return

        deposit = int(tf.get("deposit") or 0)
        if deposit <= 0:
            return

        tf["deposit_forfeit"] = True
        tf["deposit_forfeit_reason"] = str(reason)
        tf["deposit_forfeit_at"] = datetime.now(_tz_for(user_id)).isoformat()
        tf["deposit_left"] = 0

        async with Database.acquire() as conn:
            await conn.execute(
                "UPDATE users SET training_form=$2 WHERE user_id=$1",
                user_id, json.dumps(tf, ensure_ascii=False)
            )

        await context.bot.send_message(
            chat_id=user_id,
            text=f"‚ùå –ó–∞–ª–æ–≥ {deposit} ‚ÇΩ —Å–ø–∏—Å–∞–Ω: {reason}"
        )
    except Exception as e:
        logger.exception("_forfeit_deposit failed: %s", e)

# ===================== AI-–∑–∞–ª–æ–≥ =====================
try:
    from gpt_tasks import recommend_deposit_with_gpt  # type: ignore
except Exception:
    recommend_deposit_with_gpt = None  # fallback –Ω–∏–∂–µ

def _clamp_deposit(v: int) -> int:
    return max(500, min(int(v), 100_000))

def _build_onboarding_profile(user, st: dict) -> dict:
    per_day_time = st.get("schedule_map_time") or {}
    per_day_duration = st.get("schedule_map_duration") or {}
    dur_common = st.get("duration_common_min")
    return {
        "user": {
            "id": user.id,
            "username": user.username,
            "first_name": user.first_name,
            "last_name": user.last_name,
        },
        "answers": st.get("answers") or {},  # ‚Üê –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã (3 –≤–æ–ø—Ä–æ—Å–∞)
        "schedule": {
            "per_day_time": per_day_time,
            "per_day_duration": per_day_duration if per_day_duration else None,
            "duration_common_min": dur_common,
        },
        "rest_seconds": st.get("rest_seconds"),
        "program_price": st.get("program_price"),  # –µ—Å–ª–∏ –≥–¥–µ-—Ç–æ –ø–æ–ø–∞–¥—ë—Ç—Å—è
    }

async def _ai_recommend_deposit(user, st: dict) -> tuple[int, str]:
    profile = _build_onboarding_profile(user, st)

    if callable(recommend_deposit_with_gpt):
        try:
            resp = await recommend_deposit_with_gpt(profile)  # {"deposit": int, "reason": str}
            dep = _clamp_deposit(int(resp.get("deposit", 5000)))
            reason = str(resp.get("reason") or "–ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –ø–æ –∞–Ω–∫–µ—Ç–µ")
            return dep, reason
        except Exception:
            pass

    # Fallback-—ç–≤—Ä–∏—Å—Ç–∏–∫–∞ ‚Äî –±–µ–∑ –ø—Ä–∏–≤—è–∑–∫–∏ –∫ —Å—Ç–∞—Ä—ã–º –ø–æ–ª—è–º
    dep = 5000
    per_day_time = (profile.get("schedule") or {}).get("per_day_time") or {}
    days_cnt = len(per_day_time)
    if days_cnt >= 4:
        dep += 1000
    if days_cnt >= 6:
        dep += 1000

    dur_common = (profile.get("schedule") or {}).get("duration_common_min")
    per_day_duration = (profile.get("schedule") or {}).get("per_day_duration") or {}
    avg_dur = None
    try:
        if dur_common:
            avg_dur = int(dur_common)
        elif per_day_duration:
            vals = [int(x) for x in per_day_duration.values() if x]
            if vals:
                avg_dur = sum(vals)//len(vals)
    except Exception:
        pass
    if avg_dur and avg_dur >= 60:
        dep += 1000

    # –µ—Å–ª–∏ –≤ –æ—Ç–≤–µ—Ç–∞—Ö –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è –∫—Ä—É–ø–Ω—ã–µ —á–∏—Å–ª–∞ ‚Äî —Ç—Ä–∞–∫—Ç—É–µ–º –∫–∞–∫ ¬´–≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å/–¥–µ–Ω—å–≥–∏/—Ü–µ–Ω–∞¬ª
    try:
        answers_text = " ".join(str(v) for v in (profile.get("answers") or {}).values())
        m = re.search(r"\d{3,6}", answers_text.replace(" ", ""))
        if m and int(m.group(0)) >= 5000:
            dep += 1500
    except Exception:
        pass

    dep = _clamp_deposit(dep)
    return dep, "–†–µ–∑–µ—Ä–≤–Ω–∞—è —ç–≤—Ä–∏—Å—Ç–∏–∫–∞ (–ò–ò –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)"

async def _auto_deposit_and_finish(message: Message, update: Update, context: ContextTypes.DEFAULT_TYPE, st: dict):
    user = update.effective_user
    wait_msg = await message.reply_text("ü§ñ –°—á–∏—Ç–∞—é —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–ª–æ–≥ –ø–æ —Ç–≤–æ–∏–º –æ—Ç–≤–µ—Ç–∞–º‚Ä¶")
    dep, why = await _ai_recommend_deposit(user, st)
    st["deposit"] = dep  # –¥–µ—Ñ–æ–ª—Ç ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è

    txt = f"üßÆ –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º—ã–π –∑–∞–ª–æ–≥: *{dep} ‚ÇΩ*\n–ü—Ä–∏—á–∏–Ω–∞: {why}\n\n–í—ã–±–µ—Ä–∏:"
    try:
        await wait_msg.edit_text(txt, parse_mode="Markdown", reply_markup=_deposit_choice_kb(dep))
    except Exception:
        await message.reply_text(txt, parse_mode="Markdown", reply_markup=_deposit_choice_kb(dep))

    st["step"] = "deposit_choice"

# ===================== –ö–û–°–ú–ï–¢–ò–ö–ê –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò (–∏–Ω–ª–∞–π–Ω) =====================
DAY_LABELS = [
    ("mon", "–ü–Ω"), ("tue", "–í—Ç"), ("wed", "–°—Ä"),
    ("thu", "–ß—Ç"), ("fri", "–ü—Ç"), ("sat", "–°–±"), ("sun", "–í—Å"),
]
EN2RU_SHORT = dict(DAY_LABELS)
RU_FULL_BY_EN = EN_TO_RU_FULL

TIME_PRESETS = ["07:00", "08:00", "18:00", "19:00", "19:30", "20:00"]
DUR_PRESETS = [30, 45, 60, 75, 90]
REST_PRESETS = [30, 60, 90, 120, 180]

def _days_toggle_kb(st: dict) -> InlineKeyboardMarkup:
    chosen = set(st.get("chosen_days", []))
    rows = []
    buf = []
    for i, (key, label) in enumerate(DAY_LABELS, 1):
        mark = "‚úÖ " if key in chosen else ""
        buf.append(InlineKeyboardButton(f"{mark}{label}", callback_data=f"days_toggle:{key}"))
        if i % 3 == 0:
            rows.append(buf); buf = []
    if buf:
        rows.append(buf)
    rows.append([InlineKeyboardButton("üßπ –°–±—Ä–æ—Å–∏—Ç—å", callback_data="days_clear"),
                 InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ ‚ñ∂Ô∏è", callback_data="days_done")])
    return InlineKeyboardMarkup(rows)

def _time_kb_for_day(day_en: str, current: Optional[str] = None) -> InlineKeyboardMarkup:
    rows = []
    buf = []
    for i, t in enumerate(TIME_PRESETS, 1):
        mark = "‚úÖ " if current == t else ""
        buf.append(InlineKeyboardButton(f"{mark}{t}", callback_data=f"time_pick:{day_en}:{t}"))
        if i % 3 == 0:
            rows.append(buf); buf = []
    if buf:
        rows.append(buf)
    rows.append([InlineKeyboardButton("‚å®Ô∏è –î—Ä—É–≥–æ–µ –≤—Ä–µ–º—è", callback_data=f"time_custom:{day_en}")])
    return InlineKeyboardMarkup(rows)

def _rest_inline_kb() -> InlineKeyboardMarkup:
    rows = []
    buf = []
    for i, v in enumerate(REST_PRESETS, 1):
        label = f"{v//60}:{v%60:02d}" if v >= 60 else f"{v}—Å"
        buf.append(InlineKeyboardButton(label, callback_data=f"rest:{v}"))
        if i % 3 == 0:
            rows.append(buf); buf = []
    if buf:
        rows.append(buf)
    rows.append([InlineKeyboardButton("‚å®Ô∏è –î—Ä—É–≥–æ–µ", callback_data="rest_custom")])
    return InlineKeyboardMarkup(rows)

def _dur_mode_inline_kb_pretty() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("–û–¥–∏–Ω–∞–∫–æ–≤–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="dur_same")],
        [InlineKeyboardButton("–†–∞–∑–Ω–∞—è –ø–æ –¥–Ω—è–º", callback_data="dur_diff")],
    ])

def _deposit_choice_kb(dep: int) -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup([
        [InlineKeyboardButton(f"üëç –°–æ–≥–ª–∞—Å–µ–Ω —Å {dep} ‚ÇΩ", callback_data="dep_ok")],
        [InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ —Å–≤–æ—é —Å—É–º–º—É", callback_data="dep_custom")],
    ])

def _dur_common_kb(current: int = 60) -> InlineKeyboardMarkup:
    rows = []
    buf = []
    for i, v in enumerate(DUR_PRESETS, 1):
        mark = "‚úÖ " if v == current else ""
        buf.append(InlineKeyboardButton(f"{mark}{v} –º–∏–Ω", callback_data=f"dur_common_set:{v}"))
        if i % 3 == 0:
            rows.append(buf); buf = []
    if buf:
        rows.append(buf)
    rows.append([
        InlineKeyboardButton("‚àí5", callback_data="dur_common_adj:-5"),
        InlineKeyboardButton("‚àí1", callback_data="dur_common_adj:-1"),
        InlineKeyboardButton("+1", callback_data="dur_common_adj:+1"),
        InlineKeyboardButton("+5", callback_data="dur_common_adj:+5"),
    ])
    rows.append([InlineKeyboardButton("‚å®Ô∏è –î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏)", callback_data="dur_common_custom"),
                 InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ ‚ñ∂Ô∏è", callback_data="dur_common_done")])
    return InlineKeyboardMarkup(rows)

def _dur_perday_kb(day_en: str, current: int = 60) -> InlineKeyboardMarkup:
    rows = []
    buf = []
    for i, v in enumerate(DUR_PRESETS, 1):
        mark = "‚úÖ " if v == current else ""
        buf.append(InlineKeyboardButton(f"{mark}{v} –º–∏–Ω", callback_data=f"dur_pd_set:{day_en}:{v}"))
        if i % 3 == 0:
            rows.append(buf); buf = []
    if buf:
        rows.append(buf)
    rows.append([InlineKeyboardButton("‚å®Ô∏è –î—Ä—É–≥–æ–µ", callback_data=f"dur_pd_custom:{day_en}")])
    return InlineKeyboardMarkup(rows)

# ===================== –ù–û–í–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø (—Å 2 —Ñ–æ—Ç–æ –∏ 3 –≤–æ–ø—Ä–æ—Å–∞–º–∏) =====================
ONBOARDING_TEXT_1 = (
    "–Ø ‚Äî Foscar, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —Ç—Ä–µ–Ω–µ—Ä –∏ —Å—Ç—Ä–æ–≥–∏–π –Ω–∞–ø–∞—Ä–Ω–∏–∫ ü•∑.\n\n"
    "–°–µ–π—á–∞—Å —Ç—ã –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ *–Ω–µ–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–≥–æ –æ–ø—Ç–∏–º–∏–∑–º–∞*. "
    "–ú–æ—Ç–∏–≤–∞—Ü–∏—è —Å–ø–∞–¥—ë—Ç ‚Äî —è —É–¥–µ—Ä–∂—É —Ç–µ–±—è –≤ –∫–æ–ª–µ–µ ‚ö°Ô∏è"
)

ONBOARDING_TEXT_2 = (
    "üî• {name}, –Ω–∞—Å—Ç–∞–ª–æ –≤—Ä–µ–º—è –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞.\n\n"
    "‚ú® –ß—Ç–æ–±—ã —è –º–æ–≥ –≤–µ—Å—Ç–∏ —Ç–µ–±—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ, –º–Ω–µ –Ω—É–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ —É–∑–Ω–∞—Ç—å –æ —Ç–µ–±–µ. "
    "–í—Å–µ–≥–æ 3 –∫–æ—Ä–æ—Ç–∫–∏—Ö –≤–æ–ø—Ä–æ—Å–∞ ‚Äî –∏ —Ç—ã –ø–æ–º–æ–∂–µ—à—å —Å–µ–±–µ –≤—ã—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—á–Ω—ã–π —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç –¥–ª—è –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.\n\n"
    "üéØ –ü–æ–π–º—ë–º, —á—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ç–æ–±–æ–π –¥–≤–∏–∂–µ—Ç.\n"
    "üõ° –û–ø—Ä–µ–¥–µ–ª–∏–º —Ç–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ –∏ —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã.\n"
    "üí∞ –ù–∞–π–¥—ë–º —Å—É–º–º—É –∑–∞–ª–æ–≥–∞, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –¥–µ—Ä–∂–∞—Ç—å —Ç–µ–±—è –≤ –∏–≥—Ä–µ.\n\n"
    "‚öîÔ∏è –û—Ç–≤–µ—á–∞—è —á–µ—Å—Ç–Ω–æ, —Ç—ã –ø–æ–º–æ–≥–∞–µ—à—å —Å–∞–º–æ–º—É —Å–µ–±–µ. –Ø –Ω–µ –¥–∞–º —Ç–µ–±–µ —Å–≤–µ—Ä–Ω—É—Ç—å —Å –ø—É—Ç–∏.\n\n"
    "üëá –ì–æ—Ç–æ–≤? –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, –∏ –Ω–∞—á–Ω—ë–º."
)

def _reg_questions() -> List[str]:
    # –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤ settings.ONBOARDING_QUESTIONS = ["...", "...", "..."]
    qs = getattr(settings, "ONBOARDING_QUESTIONS", None)
    if isinstance(qs, (list, tuple)) and len(qs) >= 3:
        return [str(qs[0]), str(qs[1]), str(qs[2])]
    # –î–µ—Ñ–æ–ª—Ç ‚Äî –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
    return [
        "1) –ü–æ—á–µ–º—É —Ç—ã –Ω–∞—á–∏–Ω–∞–µ—à—å —Å–µ–π—á–∞—Å? –ß—Ç–æ –¥–ª—è —Ç–µ–±—è –≤–∞–∂–Ω–æ?",
        "2) –ö–∞–∫–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è —Ü–µ–ª—å –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 4 –Ω–µ–¥–µ–ª–∏ (–∏–∑–º–µ—Ä–∏–º–∞—è)?",
        "3) –ß—Ç–æ —Ç–µ–±—è —á–∞—â–µ –≤—Å–µ–≥–æ —Å—Ä—ã–≤–∞–µ—Ç –∏ –∫–∞–∫ –º—ã —ç—Ç–æ –æ–±–æ–π–¥—ë–º?",
    ]

def _reg_state(context: ContextTypes.DEFAULT_TYPE) -> dict:
    return context.user_data.setdefault("reg", {})

def _reg_active(context: ContextTypes.DEFAULT_TYPE) -> bool:
    return "reg" in context.user_data

async def _already_registered(user_id: int) -> bool:
    async with Database.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT training_form FROM users WHERE user_id = $1",
            user_id
        )
    tf = _load_training_form(row.get("training_form") if row else None)
    per_day_time = (tf or {}).get("per_day_time") or {}
    return bool(per_day_time)

async def register_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    user = update.effective_user

    if await _already_registered(user.id):
        await msg.reply_text(
            "–¢—ã —É–∂–µ –ø—Ä–æ—à—ë–ª –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ ‚Äî –ø–æ–≤—Ç–æ—Ä–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–µ –Ω—É–∂–Ω–∞.\n",
            reply_markup=_make_keyboard(False, user.id)
        )
        return

    # —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ (–∫–∞–∫ —É —Ç–µ–±—è –±—ã–ª–æ)
    async with Database.acquire() as conn:
        row = await conn.fetchrow("SELECT user_id, rest_seconds, timezone FROM users WHERE user_id=$1", user.id)
        if not row:
            await conn.execute(
                """
                INSERT INTO users (user_id, username, first_name, last_name, timezone)
                VALUES ($1,$2,$3,$4,$5)
                ON CONFLICT (user_id) DO NOTHING
                """,
                user.id, user.username, user.first_name, user.last_name,
                getattr(settings, "TIMEZONE", "Europe/Moscow")
            )
            _set_rest_seconds_cached(user.id, 60)
            _set_tz_for(user.id, getattr(settings, "TIMEZONE", "Europe/Moscow"))
        else:
            _set_rest_seconds_cached(user.id, int(row.get("rest_seconds") or 60))
            _set_tz_for(user.id, row.get("timezone") or getattr(settings, "TIMEZONE", "Europe/Moscow"))

    st = _reg_state(context)
    st.clear()
    st["name"] = user.first_name or (user.username and f"@{user.username}") or "–¥—Ä—É–≥"
    st["step"] = "await_qa_begin"
    st["answers"] = {}
    st["schedule_map_time"] = {}
    st["schedule_map_duration"] = {}

    # –ø–∏–Ω —Å–≤–µ—Ä—Ö—É
    pinned = await msg.reply_text("üî•üî•üî•\n*–ü–û–ú–ù–ò –°–í–û–Æ –¶–ï–õ–¨*\nüî•üî•üî•", parse_mode="Markdown")
    try:
        await context.bot.pin_chat_message(chat_id=msg.chat_id, message_id=pinned.message_id)
    except Exception:
        pass

    # –≠–∫—Ä–∞–Ω ‚Ññ1 ‚Äî –¢–û–õ–¨–ö–û –æ–Ω + –∫–Ω–æ–ø–∫–∞ ¬´–î–∞–ª—å—à–µ¬ª
    kb1 = InlineKeyboardMarkup([[InlineKeyboardButton("–î–∞–ª—å—à–µ ‚ñ∂Ô∏è", callback_data="ob_next")]])
    await _send_local_photo_or_text(
        context.bot, msg.chat_id, ASSET_IMG_1, ONBOARDING_TEXT_1,
        parse_mode="Markdown", reply_markup=kb1
    )

# ===== –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Ä–µ—Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π =====
from types import SimpleNamespace

async def reschedule_all_users(app) -> None:
    """–ü–æ–¥–Ω—è—Ç—å –≤—Å–µ run_daily –∑–∞–¥–∞—á–∏ –∏–∑ –ë–î –ø–æ—Å–ª–µ —Ä–µ—Å—Ç–∞—Ä—Ç–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞."""
    try:
        async with Database.acquire() as conn:
            rows = await conn.fetch("""
                SELECT user_id, timezone, rest_seconds, workout_duration,
                       training_form, reminder_enabled
                  FROM users
                 WHERE reminder_enabled = TRUE
            """)
        for r in rows:
            uid = int(r["user_id"])
            tz_name = r.get("timezone") or getattr(settings, "TIMEZONE", "Europe/Moscow")
            _set_tz_for(uid, tz_name)
            _set_rest_seconds_cached(uid, int(r.get("rest_seconds") or 60))

            tf = _load_training_form(r.get("training_form"))
            per_day_time = (tf.get("per_day_time") or {})
            per_day_duration = (tf.get("per_day_duration") or None)

            default_dur = int(
                r.get("workout_duration")
                or (next(iter(per_day_duration.values())) if per_day_duration else 60)
            )
            _set_window_seconds_cached(uid, default_dur * 60)

            if per_day_time:
                # –¥–µ–ª–∞–µ–º ¬´–ø—Å–µ–≤–¥–æ-context¬ª, –ø–æ—Ç–æ–º—É —á—Ç–æ _schedule_reminders_per_day –∂–¥—ë—Ç context.application.job_queue
                fake_ctx = SimpleNamespace(
            application=SimpleNamespace(job_queue=app.job_queue),
                    bot=app.bot,
                )
                _schedule_reminders_per_day(
                    fake_ctx, uid, per_day_time, per_day_duration,
                    default_duration_min=default_dur
                )
                _set_registered(uid, True)
                logger.info("[startup] rescheduled user=%s days=%s",
                            uid, list(per_day_time.keys()))
    except Exception as e:
        logger.exception("reschedule_all_users failed: %s", e)

async def register_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # if not _reg_active(context):
    #     return
    # st = _reg_state(context)
    # step = st.get("step")
    #
    # if step not in ("photo1", "photo2"):
    #     return
    #
    # msg = update.effective_message
    # file_id = _extract_image_file_id_from_message(update.message)
    # if not file_id:
    #     await msg.reply_text("–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Ñ–æ—Ç–æ. –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ üôè")
    #     return
    #
    # # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id, —á—Ç–æ–±—ã –ø–æ—Ç–æ–º (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —É—Ç—è–Ω—É—Ç—å –∏–∑ Telegram
    # st["photos"].append(file_id)
    #
    # # —Ñ–æ—Ç–æ ‚Ññ1 -> –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–µ–∫—Å—Ç 1 —Å —Ñ–æ—Ç–æ + –ø—Ä–æ—Å–∏–º —Ñ–æ—Ç–æ ‚Ññ2
    # if step == "photo1":
    #     try:
    #         await context.bot.send_photo(
    #             chat_id=msg.chat_id,
    #             photo=file_id,
    #             caption=ONBOARDING_TEXT_1,
    #             parse_mode="Markdown"
    #         )
    #     except Exception:
    #         await msg.reply_text(ONBOARDING_TEXT_1, parse_mode="Markdown")
    #
    #     st["step"] = "photo2"
    #     await msg.reply_text("üì∑ –û—Ç–ª–∏—á–Ω–æ. –¢–µ–ø–µ—Ä—å –ø—Ä–∏—à–ª–∏ *–≤—Ç–æ—Ä–æ–µ* —Ñ–æ—Ç–æ (‚Ññ2) ‚Äî —è –ø—Ä–∏–ª–æ–∂—É –µ–≥–æ –∫ —Ç–µ–∫—Å—Ç—É #2.", parse_mode="Markdown")
    #     return
    #
    # # —Ñ–æ—Ç–æ ‚Ññ2 -> –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –¢–µ–∫—Å—Ç 2 —Å —Ñ–æ—Ç–æ + –∫–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å 3 –≤–æ–ø—Ä–æ—Å–∞"
    # if step == "photo2":
    #     name = st.get("name", "–¥—Ä—É–≥")
    #     text2 = ONBOARDING_TEXT_2.format(name=name)
    #     try:
    #         await context.bot.send_photo(
    #             chat_id=msg.chat_id,
    #             photo=file_id,
    #             caption=text2,
    #             parse_mode="Markdown",
    #             reply_markup=InlineKeyboardMarkup([
    #                 [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å 3 –≤–æ–ø—Ä–æ—Å–∞", callback_data="qa_begin")]
    #             ])
    #         )
    #     except Exception:
    #         await msg.reply_text(
    #             text2,
    #             parse_mode="Markdown",
    #             reply_markup=InlineKeyboardMarkup([
    #                 [InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å 3 –≤–æ–ø—Ä–æ—Å–∞", callback_data="qa_begin")]
    #             ])
    #         )
    #     st["step"] = "await_qa_begin"
        return

async def register_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _reg_active(context):
        return

    msg = update.effective_message
    text = (msg.text or "").strip()
    st = _reg_state(context)

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ 3 –í–û–ü–†–û–°–ê ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if st.get("step") in ("q1", "q2", "q3"):
        answers = st.setdefault("answers", {})
        if st["step"] == "q1":
            answers["q1"] = text
            st["step"] = "q2"
            await msg.reply_text(_reg_questions()[1])
            return

        if st["step"] == "q2":
            answers["q2"] = text
            st["step"] = "q3"
            await msg.reply_text(_reg_questions()[2])
            return

        if st["step"] == "q3":
            answers["q3"] = text
            # –ü–æ–¥—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è: –≤—ã—Ç–∞—â–∏–º –≤–æ–∑–º–æ–∂–Ω—É—é —Å—É–º–º—É –∏–∑ –æ—Ç–≤–µ—Ç–∞; GPT –ø–æ–∑–∂–µ –º–æ–∂–µ—Ç –µ—ë –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å.
            st["deposit"] = _parse_deposit_from_text(text)
            # –ü–µ—Ä–µ–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º —Å–ø—Ä–æ—Å–∏–º –ø–ª–∞–Ω —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (—Å—Å—ã–ª–∫–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç)
            st["step"] = "q_plan"
            await msg.reply_text(
                "üìπ –û–ø–∏—à–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É:\n"
                "‚Äî –Ω–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç (—á—Ç–æ –¥–µ–ª–∞–µ—à—å),\n"
                "‚Äî –∏–ª–∏ –ø—Ä–∏—à–ª–∏ –°–°–´–õ–ö–£ –Ω–∞ –≤–∏–¥–µ–æ (YouTube/VK –∏ —Ç.–ø.).\n\n"
                "–ü—Ä–∏–º–µ—Ä—ã:\n"
                "‚Ä¢ \"–†–∞–∑–º–∏–Ω–∫–∞ 5 –º–∏–Ω, 3√ó10 –æ—Ç–∂–∏–º–∞–Ω–∏–π, 3√ó15 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π...\"\n"
                "‚Ä¢ https://youtu.be/XXXXX",
            )
            return

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–õ–ê–ù –¢–†–ï–ù–ò–†–û–í–ö–ò (—Ç–µ–∫—Å—Ç/—Å—Å—ã–ª–∫–∞) ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if st.get("step") == "q_plan":
        url_m = re.search(r'(https?://\S+)', text)
        if url_m:
            st["workout_video_url"] = url_m.group(1).strip()
            st["workout_text"] = None
        else:
            st["workout_text"] = text.strip()[:2000] if text.strip() else None
            st["workout_video_url"] = None

        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –¥–Ω–µ–π (—Ç—É–º–±–ª–µ—Ä—ã)
        st["step"] = "pick_days"
        st["chosen_days"] = []
        await msg.reply_text(
            "üóì –í—ã–±–µ—Ä–∏ –¥–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ (–Ω–∞–∂–∏–º–∞–π, —á—Ç–æ–±—ã –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å). –ü–æ—Ç–æ–º ‚Äî ¬´–ì–æ—Ç–æ–≤–æ ‚ñ∂Ô∏è¬ª.",
            reply_markup=_days_toggle_kb(st)
        )
        return

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†—É—á–Ω–æ–π –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –¥–Ω—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if st.get("temp_day_en") and st.get("step") in ("enter_time_for_day", "times_loop"):
        t = _parse_time_hhmm(text.replace(" ", "").replace(".", ":"))
        if not t:
            await msg.reply_text("–§–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ –ß–ß:–ú–ú, –Ω–∞–ø—Ä. 18:00. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return
        day_en = st.pop("temp_day_en")
        st["schedule_map_time"][day_en] = t.strftime("%H:%M")
        pend = st.get("pending_days_time", [])
        if pend:
            next_day = pend.pop(0)
            st["temp_day_en"] = next_day
            ru = RU_FULL_BY_EN.get(next_day, next_day)
            await msg.reply_text(
                f"‚è∞ –í—Ä–µ–º—è –¥–ª—è {ru}:",
                reply_markup=_time_kb_for_day(next_day, st["schedule_map_time"].get(next_day))
            )
            return
        st["step"] = "ask_rest_inline"
        await msg.reply_text("‚è±Ô∏è –í—ã–±–µ—Ä–∏ –æ—Ç–¥—ã—Ö –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏:", reply_markup=_rest_inline_kb())
        return

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –†—É—á–Ω–æ–π –≤–≤–æ–¥ –æ—Ç–¥—ã—Ö–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if st.get("step") == "ask_rest":
        rest_sec = _parse_rest_seconds(text)
        if rest_sec is None or rest_sec > 24*60*60:
            await msg.reply_text("–í–≤–µ–¥–∏ —Å–µ–∫—É–Ω–¥—ã –∏–ª–∏ –ú–ú:–°–°. –ü—Ä–∏–º–µ—Ä: 60 –∏–ª–∏ 1:30.")
            return
        st["rest_seconds"] = rest_sec
        st["step"] = "ask_duration_mode"
        await msg.reply_text("‚è≤Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –∏–ª–∏ —Ä–∞–∑–Ω–∞—è –ø–æ –¥–Ω—è–º?", reply_markup=_dur_mode_inline_kb_pretty())
        return

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤—ë–ª –°–í–û–Æ —Å—É–º–º—É –∑–∞–ª–æ–≥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if st.get("step") == "ask_deposit_custom":
        m = re.search(r"\d{1,6}", text.replace(" ", ""))
        if not m:
            await msg.reply_text("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ ‚ÇΩ. –ü—Ä–∏–º–µ—Ä: 3000")
            return
        val = _clamp_deposit(int(m.group(0)))
        st["deposit"] = val
        st["step"] = "ask_deposit_days"
        st.setdefault("deposit_started_at", date.today().isoformat())
        st.setdefault("deposit_done_dates", [])
        await msg.reply_text("üìÖ –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å –∑–∞–ª–æ–≥? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (1‚Äì90), –Ω–∞–ø—Ä–∏–º–µ—Ä 7, 14, 21.")
        return

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –í–≤–æ–¥ —Å—Ä–æ–∫–∞ –∑–∞–º–æ—Ä–æ–∑–∫–∏ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if st.get("step") == "ask_deposit_days":
        m = re.search(r"\d{1,3}", text)
        if not m:
            await msg.reply_text("–í–≤–µ–¥–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –¥–Ω–µ–π (–Ω–∞–ø—Ä–∏–º–µ—Ä 7). –î–∏–∞–ø–∞–∑–æ–Ω 1‚Äì90.")
            return
        days = int(m.group(0))
        if not (1 <= days <= 90):
            await msg.reply_text("–ß–∏—Å–ª–æ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –†–∞–∑—Ä–µ—à–µ–Ω–æ 1‚Äì90 –¥–Ω–µ–π.")
            return
        st["deposit_days"] = days

        await _reg_finish(msg, st)
        save_text = await _persist_onboarding_schedule_per_day(update.effective_user.id, context, st)
        if save_text:
            await msg.reply_text(save_text)

        context.user_data.pop("reg", None)
        await msg.reply_text(
            "–ì–æ—Ç–æ–≤–æ! –ù–∏–∂–µ ‚Äî –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=_make_keyboard(False, update.effective_user.id)
        )
        return

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ¬´‚å®Ô∏è –î—Ä—É–≥–æ–µ (–≤–≤–µ—Å—Ç–∏)¬ª ‚Äî –û–ë–©–ê–Ø –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if st.get("step") == "ask_duration_common":
        dur = _parse_duration_minutes(text)
        if dur is None:
            await msg.reply_text("–í–≤–µ–¥–∏ –º–∏–Ω—É—Ç—ã 5‚Äì240, –Ω–∞–ø—Ä–∏–º–µ—Ä 60.")
            return
        st["duration_common_min"] = dur
        _set_window_seconds_cached(update.effective_user.id, int(dur) * 60)
        # ‚¨áÔ∏è –°–†–ê–ó–£ –∑–∞–ø—É—Å–∫–∞–µ–º –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∑–∞–ª–æ–≥–∞ + –∫–Ω–æ–ø–∫–∏ ¬´–°–æ–≥–ª–∞—Å–µ–Ω / –°–≤–æ—è —Å—É–º–º–∞¬ª
        await _auto_deposit_and_finish(msg, update, context, st)
        return

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ¬´‚å®Ô∏è –î—Ä—É–≥–æ–µ¬ª –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–ª—è –ö–û–ù–ö–†–ï–¢–ù–û–ì–û –¥–Ω—è ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if st.get("step") == "ask_duration_for_day_custom" and st.get("temp_day_en"):
        dur = _parse_duration_minutes(text)
        if dur is None:
            await msg.reply_text("–í–≤–µ–¥–∏ –º–∏–Ω—É—Ç—ã 5‚Äì240 –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è.")
            return
        day_en = st.pop("temp_day_en")
        st.setdefault("schedule_map_duration", {})[day_en] = dur
        pend = st.get("pending_days_dur", [])
        if pend:
            next_day = pend.pop(0)
            st["temp_day_en"] = next_day
            ru = RU_FULL_BY_EN.get(next_day, next_day)
            await msg.reply_text(f"‚è≤Ô∏è –ú–∏–Ω—É—Ç—ã –¥–ª—è {ru}:", reply_markup=_dur_perday_kb(next_day, 60))
            return
        try:
            any_dur = next(iter(st.get("schedule_map_duration", {}).values()))
        except Exception:
            any_dur = 60
        _set_window_seconds_cached(update.effective_user.id, int(any_dur)*60)
        # ‚¨áÔ∏è –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –∑–∞–ª–æ–≥–∞
        await _auto_deposit_and_finish(msg, update, context, st)
        return

    # ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ –§–æ–ª–±—ç–∫: –ø—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏ ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
    if st.get("step") in ("pick_day", "pick_day_or_done", "pick_days"):
        await msg.reply_text(
            "–í—ã–±–∏—Ä–∞–π –¥–Ω–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –∏ –∂–º–∏ ¬´–ì–æ—Ç–æ–≤–æ ‚ñ∂Ô∏è¬ª.",
            reply_markup=_days_toggle_kb(st)
        )


# ---------------- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞ ----------------
async def _persist_onboarding_schedule_per_day(user_id: int, context: ContextTypes.DEFAULT_TYPE, st: dict) -> Optional[str]:
    per_day_time: Dict[str, str] = st.get("schedule_map_time") or {}
    if not per_day_time:
        return None

    per_day_time = {d: per_day_time[d] for d in ORDERED_DAYS if d in per_day_time}

    dur_mode = st.get("dur_mode")  # "same" | "per_day"
    per_day_duration: Dict[str, int] = {}

    if dur_mode == "per_day":
        raw = st.get("schedule_map_duration") or {}
        per_day_duration = {d: int(raw.get(d) or 60) for d in per_day_time.keys()}
        default_duration = 60
        workout_duration_common = None
    else:
        default_duration = int(st.get("duration_common_min") or 60)
        per_day_duration = {d: default_duration for d in per_day_time.keys()}
        workout_duration_common = default_duration

    rest_seconds = int(st.get("rest_seconds") or 60)
    _set_rest_seconds_cached(user_id, rest_seconds)

    dur_for_window = workout_duration_common
    if dur_for_window is None:
        try:
            dur_for_window = int(next(iter(per_day_duration.values())))
        except StopIteration:
            dur_for_window = 60
    _set_window_seconds_cached(user_id, int(dur_for_window) * 60)

    first_time_val: Optional[str] = None
    for d in ORDERED_DAYS:
        if d in per_day_time:
            first_time_val = per_day_time[d]
            break
    rtime: Optional[time] = _parse_time_hhmm(first_time_val) if first_time_val else None

    reminder_days = list(per_day_time.keys())

    extras = {
        "answers": st.get("answers") or {},             # –Ω–æ–≤—ã–µ –æ—Ç–≤–µ—Ç—ã (3 –≤–æ–ø—Ä–æ—Å–∞)
        "deposit": st.get("deposit"),
        "deposit_days": st.get("deposit_days"),
        "deposit_started_at": st.get("deposit_started_at"),
        "deposit_done_dates": st.get("deposit_done_dates", []),
        "reg_photos": list(st.get("photos") or []),     # —Å–æ—Ö—Ä–∞–Ω—è–µ–º 2 —Ñ–æ—Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        "workout_text": st.get("workout_text"),
        "workout_video_url": st.get("workout_video_url"),
    }

    training_form = {
        "per_day_time": per_day_time,
        "per_day_duration": per_day_duration,
        **extras,
    }
    training_form_json = json.dumps(training_form, ensure_ascii=False)

    async with Database.acquire() as conn:
        await conn.execute(
            """
            UPDATE users
               SET reminder_enabled = TRUE,
                   reminder_days = $2,
                   reminder_time = $3,
                   workout_duration = $4,
                   rest_seconds = $5,
                   training_form = $6
             WHERE user_id = $1
            """,
            user_id,
            reminder_days,
            rtime,
            workout_duration_common,   # None –µ—Å–ª–∏ —Ä–∞–∑–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            rest_seconds,
            training_form_json
        )

    _schedule_reminders_per_day(
        context, user_id,
        per_day_time,
        per_day_duration,
        default_duration_min=(workout_duration_common or 60)
    )
    _set_registered(user_id, True)
    lines = _human_schedule_lines(per_day_time, per_day_duration)
    txt = "‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.\n" + "\n".join(lines) + f"\n–û—Ç–¥—ã—Ö: {rest_seconds} —Å–µ–∫."
    return txt

def _reg_schedule_text_lines(st: dict) -> str:
    per_day_time: Dict[str, str] = st.get("schedule_map_time") or {}
    lines = _human_schedule_lines(per_day_time)
    return "\n".join(lines) if lines else "‚Äî (–ø–æ–∫–∞ –Ω–µ —É–∫–∞–∑–∞–ª)"

async def _reg_finish(msg: Message, st: dict):
    name = st.get("name") or "–¥—Ä—É–≥"
    dep = st.get("deposit", 500)
    deposit_days = int(st.get("deposit_days") or 7)
    schedule = _reg_schedule_text_lines(st)
    rest_seconds = int(st.get("rest_seconds") or 60)
    await msg.reply_text(
        f"üöÄ –û—Ç–ª–∏—á–Ω–æ, {name}! –ú—ã –∑–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º {dep} ‚ÇΩ –Ω–∞ {deposit_days} –¥–Ω.\n\n"
        "–ï—Å–ª–∏ –≤—ã–ø–æ–ª–Ω–∏—à—å –≤—Å–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –¥–µ–Ω—å–≥–∏ –ø–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ—Ä–Ω—É—Ç—Å—è ‚úÖ\n\n"
        "–ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å—Ç–∏—à—å ‚Äî –ø–æ—Ç–µ—Ä—è–µ—à—å –¥–µ–Ω—å–≥–∏\n"
        f"–¢–≤–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ:\n{schedule}\n"
        f"–û—Ç–¥—ã—Ö –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏: {rest_seconds} —Å–µ–∫."
    )

# ---------------- –ò–Ω–ª–∞–π–Ω-–∫–æ–ª–±—ç–∫–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ ----------------
async def register_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not _reg_active(context):
        await update.callback_query.answer()
        return

    cq = update.callback_query
    data = cq.data or ""
    st = _reg_state(context)
    if not st and data in ("ob_next", "qa_begin"):
        user = update.effective_user
        st["name"] = user.first_name or (user.username and f"@{user.username}") or "–¥—Ä—É–≥"
        st["step"] = "await_qa_begin"
        st["answers"] = {}
        st["schedule_map_time"] = {}
        st["schedule_map_duration"] = {}

    # –ï—Å–ª–∏ —ç—Ç–æ –≤–æ–æ–±—â–µ –Ω–µ –Ω–∞—à –æ–Ω–±–æ—Ä–¥–∏–Ω–≥ ‚Äî –≤–µ–∂–ª–∏–≤–æ –æ—Ç–≤–µ—á–∞–µ–º –∏ –≤—ã—Ö–æ–¥–∏–º
    if not _reg_active(context) and data not in ("ob_next", "qa_begin"):
        await _safe_cq_answer(cq)
        return

    await _safe_cq_answer(cq)

    # —Å—Ç–∞—Ä—Ç 3 –≤–æ–ø—Ä–æ—Å–æ–≤
    if data == "qa_begin":
        st["step"] = "q1"
        await cq.message.reply_text(_reg_questions()[0])
        await _safe_cq_answer(cq)
        return
    # –ø–µ—Ä–µ—Ö–æ–¥ —Å —ç–∫—Ä–∞–Ω–∞ ‚Ññ1 –Ω–∞ —ç–∫—Ä–∞–Ω ‚Ññ2
    if data == "ob_next":
        # —É–±–µ—Ä—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø–µ—Ä–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –∫–Ω–æ–ø–∫—É –Ω–µ –∂–∞–ª–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ
        try:
            await _safe_edit_reply_markup(cq.message, None)
        except Exception:
            pass

        text2 = ONBOARDING_TEXT_2.format(name=st.get("name", "–¥—Ä—É–≥"))
        kb2 = InlineKeyboardMarkup([[InlineKeyboardButton("‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å 3 –≤–æ–ø—Ä–æ—Å–∞", callback_data="qa_begin")]])
        await _send_local_photo_or_text(
            context.bot, cq.message.chat_id, ASSET_IMG_2, text2,
            parse_mode="Markdown", reply_markup=kb2
        )
        await _safe_cq_answer(cq)
        return

    # ====== –í—ã–±–æ—Ä –¥–Ω–µ–π (—Ç—É–º–±–ª–µ—Ä—ã) ======
    if data.startswith("days_toggle:"):
        day_en = data.split(":", 1)[1]
        chosen = set(st.get("chosen_days", []))
        if day_en in chosen:
            chosen.remove(day_en)
        else:
            chosen.add(day_en)
        st["chosen_days"] = list(chosen)
        await _safe_edit_reply_markup(cq.message, _days_toggle_kb(st))
        await _safe_cq_answer(cq)
        return

    if data == "days_clear":
        st["chosen_days"] = []
        await _safe_edit_reply_markup(cq.message, _days_toggle_kb(st))
        await _safe_cq_answer(cq, "–°–±—Ä–æ—à–µ–Ω–æ")
        return

    if data == "days_done":
        chosen = [d for d in ORDERED_DAYS if d in set(st.get("chosen_days", []))]
        if not chosen:
            await _safe_cq_answer(cq, "–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –¥–µ–Ω—å", show_alert=True)
            return
        st["schedule_map_time"] = {}
        st["pending_days_time"] = chosen.copy()
        st["step"] = "times_loop"
        next_day = st["pending_days_time"].pop(0)
        st["temp_day_en"] = next_day
        ru = RU_FULL_BY_EN.get(next_day, next_day)
        await cq.message.reply_text(
            f"‚è∞ –í—Ä–µ–º—è –¥–ª—è {ru}:",
            reply_markup=_time_kb_for_day(next_day)
        )
        await _safe_cq_answer(cq)
        return

    # ====== –í—Ä–µ–º—è –ø–æ –¥–Ω—è–º ======
    if data.startswith("time_pick:"):
        parts = data.split(":", 2)
        if len(parts) < 3:
            await _safe_cq_answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–∏", show_alert=True)
            return
        _, day_en, hhmm = parts
        st.setdefault("schedule_map_time", {})[day_en] = hhmm
        pend = st.get("pending_days_time", [])
        if pend:
            nd = pend.pop(0)
            st["temp_day_en"] = nd
            ru = RU_FULL_BY_EN.get(nd, nd)
            await cq.message.reply_text(f"‚è∞ –í—Ä–µ–º—è –¥–ª—è {ru}:", reply_markup=_time_kb_for_day(nd))
            await _safe_cq_answer(cq, f"{EN2RU_SHORT.get(day_en, day_en)} ‚Äî {hhmm}")
            return
        st.pop("temp_day_en", None)
        st["step"] = "ask_rest_inline"
        await cq.message.reply_text("‚è±Ô∏è –í—ã–±–µ—Ä–∏ –æ—Ç–¥—ã—Ö –º–µ–∂–¥—É –ø–æ–¥—Ö–æ–¥–∞–º–∏:", reply_markup=_rest_inline_kb())
        await _safe_cq_answer(cq, f"{EN2RU_SHORT.get(day_en, day_en)} ‚Äî {hhmm}")
        return

    if data.startswith("time_custom:"):
        _, day_en = data.split(":")
        st["temp_day_en"] = day_en
        st["step"] = "enter_time_for_day"
        ru = RU_FULL_BY_EN.get(day_en, day_en)
        await cq.message.reply_text(f"–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –¥–ª—è {ru} –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú")
        await _safe_cq_answer(cq)
        return

    # ====== –û—Ç–¥—ã—Ö ======
    if data.startswith("rest:"):
        rest_sec = int(data.split(":", 1)[1])
        st["rest_seconds"] = rest_sec
        st["step"] = "ask_duration_mode"
        await cq.message.reply_text("‚è≤Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤–∞—è –∏–ª–∏ —Ä–∞–∑–Ω–∞—è –ø–æ –¥–Ω—è–º?", reply_markup=_dur_mode_inline_kb_pretty())
        await _safe_cq_answer(cq, f"–û—Ç–¥—ã—Ö: {rest_sec} —Å–µ–∫")
        return

    if data == "rest_custom":
        st["step"] = "ask_rest"
        await cq.message.reply_text("–í–≤–µ–¥–∏ –æ—Ç–¥—ã—Ö: —Å–µ–∫—É–Ω–¥—ã –∏–ª–∏ –ú–ú:–°–° (–Ω–∞–ø—Ä–∏–º–µ—Ä 60 –∏–ª–∏ 1:30).")
        await _safe_cq_answer(cq)
        return

    # ====== –†–µ–∂–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ======
    if data in ("dur_same", "dur_diff"):
        if data == "dur_same":
            st["dur_mode"] = "same"
            st["duration_common_min"] = int(st.get("duration_common_min") or 60)
            st["step"] = "ask_duration_common_inline"
            await cq.message.reply_text(
                "‚è≤Ô∏è –ú–∏–Ω—É—Ç—ã –Ω–∞ –≤—Å–µ –¥–Ω–∏:",
                reply_markup=_dur_common_kb(st["duration_common_min"])
            )
        else:
            st["dur_mode"] = "per_day"
            per_day_time: Dict[str, str] = st.get("schedule_map_time") or {}
            pending = [d for d in ORDERED_DAYS if d in per_day_time]
            st["pending_days_dur"] = pending
            st["step"] = "ask_duration_for_day_inline"
            first = pending.pop(0)
            st["temp_day_en"] = first
            ru = RU_FULL_BY_EN.get(first, first)
            await cq.message.reply_text(f"‚è≤Ô∏è –ú–∏–Ω—É—Ç—ã –¥–ª—è {ru}:", reply_markup=_dur_perday_kb(first, 60))
        await _safe_cq_answer(cq)
        return

    # ====== –û–±—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å ======
    if data.startswith("dur_common_set:"):
        v = int(data.split(":", 1)[1])
        if v != int(st.get("duration_common_min") or 60):
            st["duration_common_min"] = v
            await _safe_edit_reply_markup(cq.message, _dur_common_kb(v))
        await _safe_cq_answer(cq, f"{v} –º–∏–Ω")
        return

    if data.startswith("dur_common_adj:"):
        delta = int(data.split(":", 1)[1])
        cur = int(st.get("duration_common_min") or 60)
        v = max(5, min(240, cur + delta))
        if v != cur:
            st["duration_common_min"] = v
            await _safe_edit_reply_markup(cq.message, _dur_common_kb(v))
        await _safe_cq_answer(cq, f"{v} –º–∏–Ω")
        return

    if data == "dur_common_custom":
        st["step"] = "ask_duration_common"
        await cq.message.reply_text("–í–≤–µ–¥–∏ –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç (5‚Äì240):")
        await _safe_cq_answer(cq)
        return

    if data == "dur_common_done":
        v = int(st.get("duration_common_min") or 60)
        _set_window_seconds_cached(update.effective_user.id, int(v) * 60)
        # ‚¨áÔ∏è –°–†–ê–ó–£ –∑–∞–ø—É—Å–∫–∞–µ–º –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∑–∞–ª–æ–≥–∞
        await _auto_deposit_and_finish(cq.message, update, context, st)
        await _safe_cq_answer(cq, "–ì–æ—Ç–æ–≤–æ")
        return

    # ====== –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ –¥–Ω—è–º ======
    if data.startswith("dur_pd_set:"):
        _, day_en, v = data.split(":")
        st.setdefault("schedule_map_duration", {})[day_en] = int(v)
        pend = st.get("pending_days_dur", [])
        if pend:
            next_day = pend.pop(0)
            st["temp_day_en"] = next_day
            ru = RU_FULL_BY_EN.get(next_day, next_day)
            await cq.message.reply_text(f"‚è≤Ô∏è –ú–∏–Ω—É—Ç—ã –¥–ª—è {ru}:", reply_markup=_dur_perday_kb(next_day, 60))
            await _safe_cq_answer(cq, f"{EN2RU_SHORT.get(day_en, day_en)} ‚Äî {v} –º–∏–Ω")
            return

        # —ç—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å ‚Üí –∑–∞–ø—É—Å–∫–∞–µ–º –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –∑–∞–ª–æ–≥–∞
        try:
            any_dur = next(iter(st.get("schedule_map_duration", {}).values()))
        except Exception:
            any_dur = 60
        _set_window_seconds_cached(update.effective_user.id, int(any_dur) * 60)
        await _auto_deposit_and_finish(cq.message, update, context, st)
        await _safe_cq_answer(cq, f"{EN2RU_SHORT.get(day_en, day_en)} ‚Äî {v} –º–∏–Ω")
        return

    if data.startswith("dur_pd_custom:"):
        _, day_en = data.split(":")
        st["temp_day_en"] = day_en
        st["step"] = "ask_duration_for_day_custom"
        ru = RU_FULL_BY_EN.get(day_en, day_en)
        await cq.message.reply_text(f"–í–≤–µ–¥–∏ –º–∏–Ω—É—Ç—ã (5‚Äì240) –¥–ª—è {ru}:")
        await _safe_cq_answer(cq)
        return

    # ====== –ó–∞–ª–æ–≥: –≤—ã–±–æ—Ä/–∫–∞—Å—Ç–æ–º –ø–æ—Å–ª–µ –ò–ò-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ ======
    if data == "dep_ok":
        st["step"] = "ask_deposit_days"
        await cq.message.reply_text("üìÖ –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å –∑–∞–ª–æ–≥? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (1‚Äì90), –Ω–∞–ø—Ä–∏–º–µ—Ä 7, 14, 21.")
        await _safe_cq_answer(cq, "–û–∫")
        return

    if data == "dep_custom":
        st["step"] = "ask_deposit_custom"
        await cq.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏ —Å–≤–æ—é —Å—É–º–º—É –∑–∞–ª–æ–≥–∞ (‚ÇΩ). –î–æ–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ, –¥–∏–∞–ø–∞–∑–æ–Ω 500‚Äì100000.")
        await _safe_cq_answer(cq, "–í–≤–µ–¥–∏ —Å–≤–æ—é —Å—É–º–º—É")
        return

    await _safe_cq_answer(cq)


# ---------------- –•–µ–Ω–¥–ª–µ—Ä—ã –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await register_start(update, context)

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message
    if not message or not message.text:
        await (update.effective_message or message).reply_text(
            "–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=_current_keyboard(context, update.effective_user.id)
        )
        return

    msg = message.text.strip()
    low = msg.lower()
    user = update.effective_user

    # –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏–∑ –º–µ–Ω—é
    if low in ("üìù —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", "/register"):
        if await _already_registered(user.id):
            await message.reply_text(
                "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω ‚úÖ\n",
                reply_markup=_make_keyboard(False, user.id)
            )
            return
        await register_start(update, context)
        return

    if _reg_active(context):
        await register_text(update, context)
        return

    # –ê–¥–º–∏–Ω-–∫–Ω–æ–ø–∫–∏ (–∑–¥–µ—Å—å —Ç–æ–ª—å–∫–æ —Ä–∞–Ω–Ω–∏–π –≤—ã—Ö–æ–¥ ‚Äî —Å–∞–º–∏ –∫–æ–º–∞–Ω–¥—ã –∏–¥—É—Ç –Ω–∏–∂–µ –≤ —Ñ–∞–π–ª–µ)
    if _is_admin(user.id):
        if low in ("üü¢ —Å—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∞–¥–º–∏–Ω)", "—Å—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "üü¢ —Å—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "/start_workout"):
            _set_session_active(context, user.id, True)
            _ws_reset(context, user.id)
            _ws_get(context, user.id)
            await message.reply_text(
                "üöÄ –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤–∫–ª—é—á—ë–Ω (–∞–¥–º–∏–Ω). –ñ–º–∏ ¬´‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É¬ª. –ë—É–¥–µ—Ç 3 —Å–Ω–∏–º–∫–∞ —Å –ø–∞—É–∑–∞–º–∏ –æ—Ç–¥—ã—Ö–∞.",
                reply_markup = await _build_workout_keyboard(context, user.id)
            )
            return
        if low in ("üî¥ —Å—Ç–æ–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∞–¥–º–∏–Ω)", "—Å—Ç–æ–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "üî¥ —Å—Ç–æ–ø —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏", "/end_workout"):
            _set_session_active(context, user.id, False)
            _ws_reset(context, user.id)
            await message.reply_text("üõë –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω (–∞–¥–º–∏–Ω).",
                                     reply_markup=_make_keyboard(False, user.id))
            return
        if low in ("üßπ –æ—á–∏—Å—Ç–∏—Ç—å –º–æ–∏ –¥–∞–Ω–Ω—ã–µ", "/clear_me"):
            await clear_my_data(update, context)
            return

    # –ú–∏–Ω–∏-–º–∞—Å—Ç–µ—Ä –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–∞–ª–æ–≥–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç (–µ—Å–ª–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —Ä–∞–Ω–µ–µ –≤ –∫–æ–ª–±—ç–∫–∞—Ö)
    if context.user_data.get("dep_edit"):
        st = context.user_data["dep_edit"]

        if st.get("await") == "amount":
            m = re.search(r"\d{1,6}", msg.replace(" ", ""))
            if not m:
                await message.reply_text("–ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ ‚ÇΩ. –ü—Ä–∏–º–µ—Ä: 3000")
                return
            amount = _clamp_deposit(int(m.group(0)))
            st["amount"] = amount
            st["await"] = "days"
            await message.reply_text("üìÖ –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å –∑–∞–ª–æ–≥? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ 1‚Äì90 (–Ω–∞–ø—Ä–∏–º–µ—Ä 7, 14, 21).")
            return

        if st.get("await") == "days":
            m = re.search(r"\d{1,3}", msg)
            if not m:
                await message.reply_text("–í–≤–µ–¥–∏ –ø—Ä–æ—Å—Ç–æ —á–∏—Å–ª–æ –¥–Ω–µ–π (1‚Äì90).")
                return
            days = int(m.group(0))
            if not (1 <= days <= 90):
                await message.reply_text("–ß–∏—Å–ª–æ –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞. –†–∞–∑—Ä–µ—à–µ–Ω–æ 1‚Äì90 –¥–Ω–µ–π.")
                return

            try:
                async with Database.acquire() as conn:
                    row = await conn.fetchrow("SELECT training_form FROM users WHERE user_id = $1", user.id)
                tf = _load_training_form(row.get("training_form") if row else None) or {}
                tf["deposit"] = int(st["amount"])
                tf["deposit_days"] = days
                tf["deposit_done_dates"] = []
                tf["deposit_started_at"] = datetime.now(_tz_for(user.id)).isoformat()
                tf["deposit_forfeit"] = False
                tf["deposit_forfeit_reason"] = ""
                tf["deposit_forfeit_at"] = None
                tf["deposit_left"] = int(st["amount"])

                async with Database.acquire() as conn:
                    await conn.execute(
                        "UPDATE users SET training_form = $2 WHERE user_id = $1",
                        user.id, json.dumps(tf, ensure_ascii=False)
                    )

                await message.reply_text(f"‚úÖ –ó–∞–ª–æ–≥ –æ–±–Ω–æ–≤–ª—ë–Ω: {tf['deposit']} ‚ÇΩ –Ω–∞ {days} –¥–Ω.")
            except Exception as e:
                logger.exception("dep_edit save failed: %s", e)
                await message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –Ω–æ–≤—ã–π –∑–∞–ª–æ–≥. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")

            context.user_data.pop("dep_edit", None)
            return

    # –ú–∞—Å—Ç–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–æ–±—â–∏–π —Å–ª—É—á–∞–π)
    if context.user_data.get("awaiting_reminder_days"):
        days = _parse_days(msg)
        if not days:
            async with Database.acquire() as conn:
                await conn.execute(
                    """
                    UPDATE users
                       SET reminder_enabled = FALSE,
                           reminder_days = $2,
                           reminder_time = NULL,
                           workout_duration = NULL
                     WHERE user_id = $1
                    """,
                    user.id, days
                )
            await _reschedule_from_db(update, context, user.id)
            _set_session_active(context, user.id, False)
            context.user_data.clear()
            await message.reply_text(
                "üîï –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ö–æ–≥–¥–∞ –Ω–∞—á–Ω—ë—à—å ‚Äî –ø—Ä–æ—Å—Ç–æ —Ç—Ä–µ–Ω–∏—Ä—É–π—Å—è.",
                reply_markup=_make_keyboard(False, user.id)
            )
            return

        context.user_data["reminder_days"] = days
        context.user_data.pop("awaiting_reminder_days", None)
        context.user_data["awaiting_reminder_time"] = True
        await message.reply_text(
            "‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å? –ù–∞–ø—Ä–∏–º–µ—Ä 07:00, 19:30 –∏–ª–∏ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É.",
            reply_markup=time_keyboard()
        )
        return

    if context.user_data.get("awaiting_reminder_time"):
        if low == "–¥—Ä—É–≥–æ–µ –≤—Ä–µ–º—è":
            await message.reply_text(
                "–í–≤–µ–¥–∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú, –Ω–∞–ø—Ä–∏–º–µ—Ä 19:30.",
                reply_markup=time_keyboard()
            )
            return

        t = _parse_time_hhmm(msg)
        if not t:
            await message.reply_text(
                "–ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. –í–≤–µ–¥–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä, 08:00).",
                reply_markup=time_keyboard()
            )
            return
        context.user_data["reminder_time"] = t
        context.user_data.pop("awaiting_reminder_time", None)

        context.user_data["awaiting_reminder_duration"] = True
        await message.reply_text(
            "‚è±Ô∏è –í–≤–µ–¥–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö (5‚Äì240) –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–Ω–æ–ø–∫—É.",
            reply_markup=duration_keyboard()
        )
        return

    if context.user_data.get("awaiting_reminder_duration"):
        dur = _parse_duration_minutes(msg)
        if dur is None:
            await message.reply_text(
                "–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –º–∏–Ω—É—Ç (–æ—Ç 5 –¥–æ 240), –Ω–∞–ø—Ä–∏–º–µ—Ä: 30, 60, 95.",
                reply_markup=duration_keyboard()
            )
            return

        context.user_data["workout_duration"] = dur
        context.user_data.pop("awaiting_reminder_duration", None)

        days = context.user_data.get("reminder_days", [])
        t = context.user_data.get("reminder_time")

        async with Database.acquire() as conn:
            await conn.execute(
                """
                UPDATE users
                   SET reminder_enabled = TRUE,
                       reminder_days = $2,
                       reminder_time = $3,
                       workout_duration = $4
                 WHERE user_id = $1
                """,
                user.id, days, t, dur
            )

        per_day_time = {d: t.strftime("%H:%M") for d in days if isinstance(t, time)}
        per_day_duration = {d: dur for d in days}
        _schedule_reminders_per_day(context, user.id, per_day_time, per_day_duration, default_duration_min=dur)

        _set_window_seconds_cached(user.id, int(dur) * 60)
        context.user_data.clear()

        pretty = " ".join(RU_BY_EN.get(d, d) for d in days)
        await message.reply_text(
            f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã.\n"
            f"–î–Ω–∏: {pretty}\n"
            f"–í—Ä–µ–º—è: {t.strftime('%H:%M')}\n"
            f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {dur} –º–∏–Ω.",
            reply_markup=_make_keyboard(False, user.id)
        )
        return

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ª–æ–≥–∞ ‚Äî —à–∞–≥ 1/2 (—á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å)
    if context.user_data.get("awaiting_dep_amount"):
        m = re.search(r"\d{1,6}", msg.replace(" ", ""))
        if not m:
            await message.reply_text("–ù—É–∂–Ω–æ —á–∏—Å–ª–æ ‚ÇΩ (500‚Äì100000). –ü—Ä–∏–º–µ—Ä: 6000")
            return
        amount = _clamp_deposit(int(m.group(0)))
        context.user_data["new_deposit_amount"] = amount
        context.user_data.pop("awaiting_dep_amount", None)
        context.user_data["awaiting_dep_days"] = True
        await message.reply_text("üìÖ –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ 1‚Äì90. –ü—Ä–∏–º–µ—Ä: 14")
        return

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–ª–æ–≥–∞ ‚Äî —à–∞–≥ 2/2
    if context.user_data.get("awaiting_dep_days"):
        m = re.search(r"\d{1,3}", msg)
        if not m:
            await message.reply_text("–í–≤–µ–¥–∏ —á–∏—Å–ª–æ –¥–Ω–µ–π 1‚Äì90. –ü—Ä–∏–º–µ—Ä: 21")
            return
        days = max(1, min(90, int(m.group(0))))
        amount = int(context.user_data.get("new_deposit_amount"))
        context.user_data.pop("awaiting_dep_days", None)
        context.user_data.pop("new_deposit_amount", None)

        try:
            await _update_deposit_in_db(update.effective_user.id, deposit=amount, deposit_days=days,
                                        restart_window=True)
            await message.reply_text(
                f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–æ: –∑–∞–ª–æ–≥ {amount} ‚ÇΩ –Ω–∞ {days} –¥–Ω. –ù–æ–≤–æ–µ –æ–∫–Ω–æ –∑–∞–ø—É—â–µ–Ω–æ —Å —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è.",
                reply_markup=_current_keyboard(context, update.effective_user.id)
            )
        except Exception as e:
            logger.exception("update dep failed: %s", e)
            await message.reply_text("‚ö†Ô∏è –ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    if low in ("–ø—Ä–æ—Ñ–∏–ª—å", "üìä –ø—Ä–æ—Ñ–∏–ª—å"):
        await profile(update, context)
        return

    await message.reply_text("–ù–µ –ø–æ–Ω—è–ª. –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
                             reply_markup=_current_keyboard(context, user.id))

async def reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    context.user_data.clear()
    context.user_data["awaiting_reminder_days"] = True
    await message.reply_text(
        "üóìÔ∏è –û–±–Ω–æ–≤–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –í –∫–∞–∫–∏–µ –¥–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è?\n"
        "‚Ä¢ ¬´–ø–Ω —Å—Ä –ø—Ç¬ª  ‚Ä¢ ¬´–≤—Ç —á—Ç —Å–±¬ª  ‚Ä¢ ¬´–ø–Ω-–ø—Ç¬ª  ‚Ä¢ ¬´–∫–∞–∂–¥—ã–π –¥–µ–Ω—å¬ª  ‚Ä¢ ¬´—Å–± –≤—Å¬ª  ‚Ä¢ ¬´–±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è¬ª",
        reply_markup=days_keyboard(),
    )

# ---------------- –ü—Ä–∏—ë–º –¥–∞–Ω–Ω—ã—Ö –∏–∑ WebApp (—Ñ–∏–∫—Å—ã –¥—É–±–ª–∏–∫–∞—Ç–æ–≤) ----------------
async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.web_app_data:
        return
    try:
        raw = update.message.web_app_data.data
        payload = json.loads(raw)
    except Exception:
        logger.exception("[webapp] failed to parse web_app_data JSON")
        return

    ptype = str(payload.get("type") or "")

    # –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ TZ
    if ptype == "tz":
        user = update.effective_user
        tz_name = (payload.get("tz") or "").strip()
        if not tz_name:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å.")
            return
        try:
            ZoneInfo(tz_name)
        except Exception:
            await update.message.reply_text(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å: {tz_name}")
            return

        async with Database.acquire() as conn:
            await conn.execute(
                "UPDATE users SET timezone = $2 WHERE user_id = $1",
                user.id, tz_name
            )
        _set_tz_for(user.id, tz_name)

        await _reschedule_from_db(update, context, user.id)
        await update.message.reply_text(f"üïí –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –æ–±–Ω–æ–≤–ª—ë–Ω: {tz_name}")
        return

    # –æ–¥–∏–Ω–æ—á–Ω–æ–µ —Ñ–æ—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if ptype in ("single_photo_uploaded", "set_photo_uploaded"):
        user = update.effective_user
        token = payload.get("token") or payload.get("t") or payload.get("id")
        if not token:
            logger.warning("[webapp] user=%s %s without token", user.id, ptype)
            return

        try:
            async with aiohttp.ClientSession() as sess:
                pull_url = settings.make_pull_url(token)
                async with sess.get(pull_url, timeout=30) as r:
                    if r.status != 200:
                        raise RuntimeError(f"HTTP {r.status}")
                    photo_bytes = await r.read()
        except Exception as e:
            logger.exception("[webapp] user=%s pull fail: %s", user.id, e)
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            return

        ok = await _save_training_photo(user.id, photo_bytes, context.bot, notify=False)
        ws = _ws_get(context, user.id)
        ws["results"].append(ok)

        jq = getattr(context.application, "job_queue", None)
        if jq:
            for job in jq.jobs():
                if (job.name or "") == f"{user.id}:nostart":
                    job.schedule_removal()

        if len(ws["results"]) >= ws["expected"]:
            await _finalize_workout(context, user.id, ws["results"])
            _ws_reset(context, user.id)
            _set_session_active(context, user.id, False)
        else:
            await update.message.reply_text(f"–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ({len(ws['results'])}/3). –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º‚Ä¶")
        return

    # —Å–µ—Ç —Ñ–æ—Ç–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏
    if ptype == "workout_set":
        user = update.effective_user
        tokens = payload.get("tokens") or payload.get("photos") or []
        if not tokens:
            return

        photos_bytes: List[bytes] = []
        async with aiohttp.ClientSession() as sess:
            for idx, tok in enumerate(tokens, start=1):
                try:
                    pull_url = settings.make_pull_url(tok)
                    async with sess.get(pull_url, timeout=30) as r:
                        if r.status != 200:
                            raise RuntimeError(f"HTTP {r.status}")
                        data = await r.read()
                        photos_bytes.append(data)
                except Exception as e:
                    logger.exception("[webapp] user=%s fail pull %d/%d: %s",
                                     user.id, idx, len(tokens), e)
                    await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
                    return

        ws = _ws_get(context, user.id)
        results = []
        for pb in photos_bytes:
            ok = await _save_training_photo(user.id, pb, context.bot, notify=False)
            results.append(ok)
            ws["results"].append(ok)

        await _finalize_workout(context, user.id, ws["results"])
        _ws_reset(context, user.id)
        _set_session_active(context, user.id, False)
        return

    logger.info("[webapp] skip payload type=%r", ptype)

# ---------------- –§–æ—Ç–æ-–ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ----------------
async def _save_training_photo(user_id: int, photo_bytes: bytes, bot, notify: bool = False) -> bool:
    from tempfile import NamedTemporaryFile
    from pathlib import Path

    with NamedTemporaryFile(suffix=".jpg", delete=False) as tmp:
        tmp.write(photo_bytes)
        tmp.flush()
        tmp_path = tmp.name

    try:
        check_text = (
            "–û—Ü–µ–Ω–∏ —Ñ–æ—Ç–æ –∫–∞–∫ –¥–æ–∫–∞–∑–∞—Ç–µ–ª—å—Å—Ç–≤–æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –î–û–ú–ê.\n"
            "–ö—Ä–∏—Ç–µ—Ä–∏–∏:\n"
            "1) –ù–∞ —Ñ–æ—Ç–æ —á–µ–ª–æ–≤–µ–∫ –í–´–ü–û–õ–ù–Ø–ï–¢ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ (–∞ –Ω–µ –ø–æ–∑–∏—Ä—É–µ—Ç/—Å–µ–ª—Ñ–∏/–ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å).\n"
            "2) –§–æ—Ç–æ –∞–∫—Ç—É–∞–ª—å–Ω–æ, –Ω–µ —Å–∫—Ä–∏–Ω—à–æ—Ç, –±–µ–∑ –º–æ–Ω—Ç–∞–∂–µ–π.\n"
            "3) –õ–û–ö–ê–¶–ò–Ø: –∂–∏–ª–æ–µ –ø–æ–º–µ—â–µ–Ω–∏–µ (–∫–≤–∞—Ä—Ç–∏—Ä–∞/–∫–æ–º–Ω–∞—Ç–∞/–¥–æ–º) –∏–ª–∏ –¥–æ–º–∞—à–Ω–∏–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å; "
            "–ù–ï –¥–æ–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–æ–º–º–µ—Ä—á–µ—Å–∫–∏–π –∑–∞–ª/–ø—É–±–ª–∏—á–Ω—ã–π —Ñ–∏—Ç–Ω–µ—Å-—Ü–µ–Ω—Ç—Ä.\n"
            "–í–µ—Ä–Ω–∏ —Å—Ç—Ä–æ–≥–æ JSON: {\"success\": bool, \"is_home\": bool, \"reason\": string}."
        )
        gpt = await verify_task_with_gpt(check_text, tmp_path)
        verified = bool(gpt.get("success"))
        is_home = bool(gpt.get("is_home"))
        reason = gpt.get("reason", "")

        if verified and not is_home:
            verified = False
            reason = reason or "–û–±—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ –ø–æ—Ö–æ–∂–∞ –Ω–∞ –¥–æ–º–∞—à–Ω—é—é"

        async with Database.acquire() as conn:
            await conn.execute(
                "INSERT INTO sets (user_id, photo, verified, gpt_reason) VALUES ($1, $2, $3, $4)",
                user_id, photo_bytes, verified, reason
            )

        if notify:
            if verified:
                await bot.send_message(chat_id=user_id, text="‚úÖ –§–æ—Ç–æ –∑–∞—Å—á–∏—Ç–∞–Ω–æ (–¥–æ–º).")
            else:
                await bot.send_message(chat_id=user_id, text="‚ùå –§–æ—Ç–æ –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ: " + (reason or "–Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞"))
        return verified
    except Exception as e:
        logger.exception("Photo verify/save failed: %s", e)
        try:
            if notify:
                await bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–æ—Ç–æ. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        except Exception:
            pass
        return False
    finally:
        try:
            Path(tmp_path).unlink(missing_ok=True)
        except Exception:
            pass

async def _finalize_workout(context: ContextTypes.DEFAULT_TYPE, user_id: int, results: List[bool]) -> None:
    ws = _ws_get(context, user_id)
    expected = int(ws.get("expected", 3))
    received = len(results)
    verified = sum(1 for x in results if x)

    threshold = expected - 1 if expected >= 3 else expected

    def _cancel_timers():
        jq = getattr(context.application, "job_queue", None)
        if jq:
            for job in jq.jobs():
                if (job.name or "") in (f"{user_id}:nostart", f"{user_id}:noresult"):
                    job.schedule_removal()

    if verified >= threshold:
        tail = ""
        if received < expected:
            tail = " (–ø—Ä–∏—Å–ª–∞–ª –Ω–µ –≤—Å–µ —Ñ–æ—Ç–æ, –Ω–æ –∑–∞—á—ë—Ç –µ—Å—Ç—å)"
        elif verified < expected:
            tail = " (–æ–¥–Ω–æ —Ñ–æ—Ç–æ –Ω–µ –ø—Ä–æ—à–ª–æ, –Ω–æ –∑–∞—á—ë—Ç –µ—Å—Ç—å)"

        await context.bot.send_message(
            chat_id=user_id,
            text=f"üèÅ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ‚úÖ –∑–∞—Å—á–∏—Ç–∞–Ω–∞ ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ {verified}/{expected}{tail}."
        )
        _cancel_timers()

        try:
            async with Database.acquire() as conn:
                row = await conn.fetchrow("SELECT training_form FROM users WHERE user_id=$1", user_id)
            tf = _load_training_form(row.get("training_form") if row else None) or {}

            deposit_days = int(tf.get("deposit_days") or 0)
            if deposit_days > 0:
                tz = _tz_for(user_id)
                today_iso = datetime.now(tz).date().isoformat()
                tf.setdefault("deposit_started_at", today_iso)

                done_dates = list(tf.get("deposit_done_dates") or [])
                if today_iso not in done_dates:
                    done_dates.append(today_iso)
                    tf["deposit_done_dates"] = done_dates

                async with Database.acquire() as conn:
                    await conn.execute(
                        "UPDATE users SET training_form=$2 WHERE user_id=$1",
                        user_id, json.dumps(tf, ensure_ascii=False)
                    )

                if len(done_dates) >= deposit_days:
                    try:
                        await context.bot.send_message(
                            chat_id=user_id,
                            text="üéâ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–º–æ—Ä–æ–∑–∫–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –ø–æ–ª–Ω–æ—Å—Ç—å—é!\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ –¥–µ–ª–∞–µ–º –¥–∞–ª—å—à–µ:",
                            reply_markup=_deposit_complete_kb()
                        )
                    except Exception:
                        pass
        except Exception as e:
            logger.exception("update deposit progress failed: %s", e)

        return

    await context.bot.send_message(
        chat_id=user_id,
        text=(
            "üèÅ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞: ‚ùå –Ω–µ –∑–∞—Å—á–∏—Ç–∞–Ω–∞.\n"
            f"–ü–æ–ª—É—á–µ–Ω–æ: {received}/{expected}, –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ: {verified}/{expected}.\n"
            f"–î–ª—è –∑–∞—á—ë—Ç–∞ –Ω—É–∂–Ω–æ ‚â• {threshold}."
        )
    )

    await _send_last_photos_with_reasons(context, user_id, limit=expected)

    try:
        admin_username = getattr(settings, "ADMIN_USERNAME", None)
        if admin_username:
            await context.bot.send_message(chat_id=user_id, text=f"üí¨ –û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ: –Ω–∞–ø–∏—à–∏ @{admin_username}.")
        else:
            await context.bot.send_message(chat_id=user_id, text="üí¨ –û–±–∂–∞–ª–æ–≤–∞–Ω–∏–µ: –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")
    except Exception:
        pass

    await _forfeit_deposit(context, user_id, f"–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω–Ω—ã—Ö —Ñ–æ—Ç–æ ({verified}/{expected})")
    _cancel_timers()

async def _send_last_photos_with_reasons(context: ContextTypes.DEFAULT_TYPE, user_id: int, limit: int = 3) -> None:
    try:
        async with Database.acquire() as conn:
            rows = await conn.fetch(
                """
                SELECT photo, verified, COALESCE(gpt_reason,'') AS gpt_reason, 
                       COALESCE(created_at, NOW()) AS created_at
                  FROM sets
                 WHERE user_id = $1
                 ORDER BY created_at DESC
                 LIMIT $2
                """,
                user_id, limit
            )
    except Exception as e:
        logger.exception("fetch last photos failed: %s", e)
        rows = []

    if not rows:
        try:
            await context.bot.send_message(
                chat_id=user_id,
                text="‚ùå –§–æ—Ç–æ —ç—Ç–æ–π —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ. –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ ‚Äî –Ω–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É."
            )
        except Exception:
            pass
        return

    def _cap(verified: bool, reason: str, idx: int) -> str:
        status = "‚ùå –ù–µ –∑–∞—Å—á–∏—Ç–∞–Ω–æ" if not verified else "‚úÖ –ó–∞—Å—á–∏—Ç–∞–Ω–æ"
        reason = (reason or "").strip()
        if reason:
            return f"{idx}. {status}\n–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        return f"{idx}. {status}"

    media: List[InputMediaPhoto] = []
    for i, r in enumerate(rows[::-1], start=1):
        b = bytes(r.get("photo") or b"")
        cap = _cap(bool(r.get("verified")), str(r.get("gpt_reason") or ""), i)
        bio = BytesIO(b)
        bio.name = f"workout_{i}.jpg"
        try:
            media.append(InputMediaPhoto(media=InputFile(bio, filename=bio.name),
                                         caption=cap[:1024]))
        except Exception:
            media = []
            break

    if media:
        try:
            await context.bot.send_media_group(chat_id=user_id, media=media)
            return
        except Exception as e:
            logger.exception("send_media_group failed, will fallback to singles: %s", e)

    for i, r in enumerate(rows[::-1], start=1):
        b = bytes(r.get("photo") or b"")
        cap = _cap(bool(r.get("verified")), str(r.get("gpt_reason") or ""), i)
        bio = BytesIO(b)
        bio.name = f"workout_{i}.jpg"
        try:
            await context.bot.send_photo(chat_id=user_id, photo=bio, caption=cap[:1024])
        except Exception as e:
            logger.exception("send_photo failed: %s", e)
            try:
                await context.bot.send_message(chat_id=user_id, text=cap)
            except Exception:
                pass

# ---------------- –ü—Ä–æ—Ñ–∏–ª—å ----------------
async def _update_deposit_in_db(user_id: int, deposit: int, deposit_days: int, restart_window: bool = False) -> None:
    async with Database.acquire() as conn:
        row = await conn.fetchrow("SELECT training_form FROM users WHERE user_id=$1", user_id)
    tf = _load_training_form(row.get("training_form") if row else None) or {}

    tf["deposit"] = int(deposit)
    tf["deposit_days"] = int(deposit_days)

    if restart_window:
        tf["deposit_done_dates"] = []
        tf["deposit_started_at"] = datetime.now(_tz_for(user_id)).isoformat()
        tf["deposit_forfeit"] = False
        tf["deposit_forfeit_reason"] = ""
        tf["deposit_forfeit_at"] = None
        tf["deposit_left"] = int(deposit)

    async with Database.acquire() as conn:
        await conn.execute(
            "UPDATE users SET training_form=$2 WHERE user_id=$1",
            user_id, json.dumps(tf, ensure_ascii=False)
        )

# ---------- PROFILE (drop-in) ----------
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    tz = _tz_for(user.id)
    now = datetime.now(tz)

    # —á–∏—Ç–∞–µ–º –≤—Å—ë –Ω—É–∂–Ω–æ–µ –∏–∑ users
    async with Database.acquire() as conn:
        row = await conn.fetchrow("""
            SELECT username, first_name, last_name,
                   reminder_enabled, reminder_days, reminder_time,
                   workout_duration, rest_seconds, training_form, timezone
              FROM users
             WHERE user_id = $1
        """, user.id)

    if not row:
        await update.effective_message.reply_text(
            "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–π–¥–∏ –±—ã—Å—Ç—Ä—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=_make_keyboard(False, user.id)
        )
        return

    # TZ
    tz_name = row.get("timezone") or getattr(settings, "TIMEZONE", "Europe/Moscow")
    _set_tz_for(user.id, tz_name)
    tz = _tz_for(user.id)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
    reminder_enabled = bool(row.get("reminder_enabled"))
    rest_seconds = int(row.get("rest_seconds") or 60)

    # training_form
    # training_form (—Å—Ç–∞—Ä–æ–µ/—Ç–æ–Ω–∫–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ)
    tf = _load_training_form(row.get("training_form"))
    per_day_time: Dict[str, str] = (tf.get("per_day_time") or {})
    per_day_duration: Optional[Dict[str, int]] = (tf.get("per_day_duration") or None)

    # legacy (–Ω–æ–≤—ã–µ ¬´–∫–∞–∂–¥—ã–π –¥–µ–Ω—å 08:00 √ó 30¬ª –∏–∑ –º–∞—Å—Ç–µ—Ä–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)
    legacy_days = list(row.get("reminder_days") or [])
    t: Optional[time] = row.get("reminder_time")
    dur = int(row.get("workout_duration") or 0)

    legacy_time = {}
    legacy_dur = None
    if legacy_days and isinstance(t, time) and dur:
        legacy_time = {d: t.strftime("%H:%M") for d in legacy_days}
        legacy_dur = {d: dur for d in legacy_days}

    # ‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: –µ—Å–ª–∏ legacy –∑–∞–ø–æ–ª–Ω–µ–Ω –∏ –ø–æ –º–Ω–æ–∂–µ—Å—Ç–≤—É –¥–Ω–µ–π –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç TF ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º legacy
    if legacy_time:
        tf_days = set((per_day_time or {}).keys())
        legacy_days_set = set(legacy_time.keys())
        if not per_day_time or (legacy_days_set != tf_days):
            per_day_time = legacy_time
            per_day_duration = legacy_dur

    # –§–æ–ª–±—ç–∫ –Ω–∞ —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ per_day_time –µ—â—ë –ø—É—Å—Ç
    if not per_day_time:
        legacy_days = list(row.get("reminder_days") or [])
        t: Optional[time] = row.get("reminder_time")
        dur = int(row.get("workout_duration") or 60)
        if legacy_days and isinstance(t, time):
            per_day_time = {d: t.strftime("%H:%M") for d in legacy_days}
            per_day_duration = {d: dur for d in legacy_days}
        else:
            per_day_time = {}
            per_day_duration = None

    # –°—Ç—Ä–æ–∫–∏ ¬´–î–Ω–∏/–≤—Ä–µ–º—è/–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å¬ª
    sched_lines = _human_schedule_lines(per_day_time, per_day_duration)

    # –ê–Ω–∫–µ—Ç–∞
    answers = tf.get("answers") or {}
    a1 = str(answers.get("q1", "")).strip()
    a2 = str(answers.get("q2", "")).strip()
    a3 = str(answers.get("q3", "")).strip()

    # –ó–∞–ª–æ–≥
    dep_line = _format_deposit_status(tf, tz)
    deposit_days = int(tf.get("deposit_days") or 0)
    done_dates = list(tf.get("deposit_done_dates") or [])
    done_cnt = len(done_dates)
    progress_bar = _progress_bar(done_cnt, deposit_days, width=20)
    started_at = (tf.get("deposit_started_at") or "").strip()

    # –ü–ª–∞–Ω-—Ç–µ–∫—Å—Ç/–≤–∏–¥–µ–æ: –∫–æ—Ä–æ—Ç–∫–∏–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
    has_plan_text = bool((tf.get("workout_text") or "").strip())
    has_plan_video = bool((tf.get("workout_video_url") or "").strip())
    plan_text_flag = "–¥–∞" if has_plan_text else "‚Äî"
    plan_video_flag = "–¥–∞" if has_plan_video else "‚Äî"

    # –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–∏–∑ –≤–∞—à–µ–≥–æ —Ñ–ª–∞–≥–∞ session_active)
    session_on = _is_session_active(context, user.id)
    session_line = "–≤–∫–ª—é—á–µ–Ω" if session_on else "–≤—ã–∫–ª—é—á–µ–Ω"

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
    who = f"@{row.get('username')}" if row.get('username') else (user.first_name or str(user.id))
    dt_str = now.strftime("%Y-%m-%d (%A) %H:%M")
    header = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {who}\n{dt_str} ({tz.key})"

    # –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    bell = "–≤–∫–ª—é—á–µ–Ω—ã" if reminder_enabled and per_day_time else "–≤—ã–∫–ª—é—á–µ–Ω—ã"

    parts = [
        header,
        "",
        f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {bell}",
        "",
        "–î–Ω–∏/–≤—Ä–µ–º—è/–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    ]

    if sched_lines:
        parts += [f"‚Ä¢ {line}" for line in sched_lines]
    else:
        parts.append("‚Ä¢ –±–µ–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

    parts += [
        "",
        f"–û—Ç–¥—ã—Ö: {rest_seconds} —Å–µ–∫.",
        "",
        "üìù –ê–Ω–∫–µ—Ç–∞",
        f"‚Ä¢ 1) –ü–æ—á–µ–º—É –Ω–∞—á–∏–Ω–∞–µ—à—å —Å–µ–π—á–∞—Å? –ß—Ç–æ –≤–∞–∂–Ω–æ?\n{(a1 or '‚Äî')}",
        f"‚Ä¢ 2) –¶–µ–ª—å –Ω–∞ 4 –Ω–µ–¥–µ–ª–∏ (–∏–∑–º–µ—Ä–∏–º–∞—è)?\n{(a2 or '‚Äî')}",
        f"‚Ä¢ 3) –ß—Ç–æ —á–∞—â–µ –≤—Å–µ–≥–æ —Å—Ä—ã–≤–∞–µ—Ç –∏ –∫–∞–∫ –æ–±–æ–π—Ç–∏?\n{(a3 or '‚Äî')}",
        f"{dep_line}",
        f"‚Ä¢ –ü–ª–∞–Ω (—Ç–µ–∫—Å—Ç): {plan_text_flag}",
        f"‚Ä¢ –ü–ª–∞–Ω (–≤–∏–¥–µ–æ): {plan_video_flag}",
        "",
        "üí∞ –ü—Ä–æ–≥—Ä–µ—Å—Å –ø–æ –∑–∞–º–æ—Ä–æ–∑–∫–µ",
        f"{done_cnt}/{deposit_days or 0} ({(0 if deposit_days == 0 else int(done_cnt*100/max(1,deposit_days)))}%)",
        progress_bar,
    ]
    if started_at:
        parts.append(f"–°—Ç–∞—Ä—Ç –æ–∫–Ω–∞: {started_at}")

    parts += [
        "",
        f"–†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏: {session_line}",
    ]

    text = "\n".join(parts)

    await update.effective_message.reply_text(
        text,
        reply_markup=_current_keyboard(context, user.id)
    )
# ---------- end PROFILE ----------

# ---------------- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥—ã ----------------
async def delete_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not _is_admin(user.id):
        await update.effective_message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=_current_keyboard(context, user.id))
        return
    try:
        await Database.drop()
        await Database.init()
        _clear_user_jobs(context, user.id)
        context.application.bot_data["session_active"] = {}
        await update.effective_message.reply_text("üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∞.",
                                                  reply_markup=_make_keyboard(False, user.id))
    except Exception as e:
        logger.exception("/delete_db failed: %s", e)
        await update.effective_message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ë–î.", reply_markup=_make_keyboard(False, user.id))

async def clear_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not _is_admin(user.id):
        await update.effective_message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=_current_keyboard(context, user.id))
        return
    try:
        async with Database.acquire() as conn:
            try:
                await conn.execute("TRUNCATE TABLE tasks RESTART IDENTITY CASCADE")
            except Exception:
                pass
            try:
                await conn.execute("TRUNCATE TABLE sets RESTART IDENTITY CASCADE")
            except Exception:
                pass
            try:
                await conn.execute(
                    """
                    UPDATE users
                       SET reminder_enabled = FALSE,
                           reminder_days = ARRAY[]::text[],
                           reminder_time = NULL,
                           workout_duration = NULL,
                           training_form = NULL
                    """
                )
            except Exception:
                pass

        _clear_user_jobs(context, user.id)
        context.application.bot_data["session_active"] = {}

        await update.effective_message.reply_text("üßπ –î–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã —É –≤—Å–µ—Ö.",
                                                  reply_markup=_make_keyboard(False, user.id))
    except Exception as e:
        logger.exception("/clear_db failed: %s", e)
        await update.effective_message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö.", reply_markup=_make_keyboard(False, user.id))

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞/—Å—Ç–æ–ø–∞
async def start_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not _is_admin(user.id):
        await update.effective_message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=_current_keyboard(context, user.id))
        return
    _set_session_active(context, user.id, True)
    _ws_reset(context, user.id)
    _ws_get(context, user.id)
    await update.effective_message.reply_text(
        "üöÄ –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤–∫–ª—é—á—ë–Ω (–∞–¥–º–∏–Ω). –ñ–º–∏ ¬´‚ñ∂Ô∏è –ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É¬ª. –ë—É–¥–µ—Ç 3 —Å–Ω–∏–º–∫–∞ —Å –ø–∞—É–∑–∞–º–∏ –æ—Ç–¥—ã—Ö–∞.",
        reply_markup = await _build_workout_keyboard(context, user.id)
    )

async def end_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if not _is_admin(user.id):
        await update.effective_message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", reply_markup=_current_keyboard(context, user.id))
        return
    _set_session_active(context, user.id, False)
    _ws_reset(context, user.id)
    await update.effective_message.reply_text("üõë –†–µ–∂–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤—ã–∫–ª—é—á–µ–Ω (–∞–¥–º–∏–Ω).",
                                              reply_markup=_make_keyboard(False, user.id))
async def deposit_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cq = update.callback_query
    data = cq.data or ""
    user = update.effective_user
    await _safe_cq_answer(cq)

    # –î–æ—Å—Ç–∞—ë–º —Ç–µ–∫—É—â—É—é –∞–Ω–∫–µ—Ç—É (training_form)
    tf = {}
    try:
        async with Database.acquire() as conn:
            row = await conn.fetchrow("SELECT training_form FROM users WHERE user_id = $1", user.id)
        tf = _load_training_form(row.get("training_form") if row else None) or {}
    except Exception as e:
        logger.exception("deposit_callback: read training_form failed: %s", e)

    # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–º–æ—Ä–æ–∑–∫—É: –æ–±–Ω—É–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∏ —Å—Ç–∞–≤–∏–º –Ω–æ–≤—É—é –¥–∞—Ç—É —Å—Ç–∞—Ä—Ç–∞
    if data == "depwin_repeat":
        tf.setdefault("deposit", tf.get("deposit") or 0)
        tf.setdefault("deposit_days", tf.get("deposit_days") or 7)
        tf["deposit_done_dates"] = []
        tf["deposit_started_at"] = datetime.now(_tz_for(user.id)).isoformat()

        try:
            async with Database.acquire() as conn:
                await conn.execute(
                    "UPDATE users SET training_form = $2 WHERE user_id = $1",
                    user.id, json.dumps(tf, ensure_ascii=False)
                )
            await cq.message.reply_text("‚úÖ –ù–æ–≤–∞—è –∑–∞–º–æ—Ä–æ–∑–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –£–¥–∞—á–∏!")
        except Exception as e:
            logger.exception("depwin_repeat save failed: %s", e)
            await cq.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–º–æ—Ä–æ–∑–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    # –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–ª–æ–≥: –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–Ω–∏-–º–∞—Å—Ç–µ—Ä —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç
    if data == "depwin_change_amount":
        context.user_data["dep_edit"] = {"await": "amount"}  # –∂–¥—ë–º —Å—É–º–º—É
        await cq.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—É–º–º—É –∑–∞–ª–æ–≥–∞ (‚ÇΩ). –î–∏–∞–ø–∞–∑–æ–Ω 500‚Äì100000.")
        return

    # –ú–µ–Ω—è–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∑–∞–ø—É—Å–∫–∞–µ–º –º–∞—Å—Ç–µ—Ä –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if data == "depwin_change_sched":
        await reminders(update, context)
        return

    # –†–µ—Å—Ç–∞—Ä—Ç –ø–æ—Å–ª–µ —Å–ø–∏—Å–∞–Ω–∏—è
    if data == "depforf_restart":
        amount = int(tf.get("deposit") or 0)
        days = int(tf.get("deposit_days") or 0)

        if amount <= 0:
            context.user_data["dep_edit"] = {"await": "amount"}
            await cq.message.reply_text("‚úèÔ∏è –í–≤–µ–¥–∏ –Ω–æ–≤—É—é —Å—É–º–º—É –∑–∞–ª–æ–≥–∞ (‚ÇΩ). –î–∏–∞–ø–∞–∑–æ–Ω 500‚Äì100000.")
            return
        if not (1 <= days <= 90):
            context.user_data["dep_edit"] = {"await": "days", "amount": amount}
            await cq.message.reply_text("üìÖ –ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –∑–∞–º–æ—Ä–æ–∑–∏—Ç—å –∑–∞–ª–æ–≥? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ 1‚Äì90 (–Ω–∞–ø—Ä–∏–º–µ—Ä 7, 14, 21).")
            return

        try:
            tf["deposit_forfeit"] = False
            tf["deposit_forfeit_reason"] = ""
            tf["deposit_forfeit_at"] = None
            tf["deposit_left"] = amount
            tf["deposit_done_dates"] = []
            tf["deposit_started_at"] = datetime.now(_tz_for(user.id)).isoformat()

            async with Database.acquire() as conn:
                await conn.execute(
                    "UPDATE users SET training_form = $2 WHERE user_id = $1",
                    user.id, json.dumps(tf, ensure_ascii=False)
                )
            await cq.message.reply_text("‚úÖ –ù–æ–≤–∞—è –∑–∞–º–æ—Ä–æ–∑–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞. –£–¥–∞—á–∏!")
        except Exception as e:
            logger.exception("depforf_restart save failed: %s", e)
            await cq.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –∑–∞–º–æ—Ä–æ–∑–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
        return

    # –ó–∞–∫—Ä—ã—Ç—å
    if data == "depwin_later":
        await _safe_cq_answer(cq, "–û–∫")
        return
