import logging
import pickle
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ContextTypes
from database import Database
from image_processor import extract_face_from_photo, compare_faces
from gpt_tasks import generate_gpt_task, verify_task_with_gpt
from config import settings
from pathlib import Path

logger = logging.getLogger(__name__)

def main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [[KeyboardButton("üèãÔ∏è –ü–æ–ª—É—á–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ"), KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å")]],
        resize_keyboard=True,
    )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    async with Database.acquire() as conn:
        user_row = await conn.fetchrow(
            "SELECT training_program FROM users WHERE user_id = $1",
            user.id
        )
    if not user_row:
        await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–ª—Ñ–∏ üì∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        context.user_data["awaiting_face"] = True
    elif not user_row["training_program"]:
        await update.message.reply_text("‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–ª–∏ —Ü–µ–ª—è—Ö.")
        context.user_data["awaiting_program"] = True
    else:
        await update.message.reply_text(
            "‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ üí™",
            reply_markup=main_keyboard(),
        )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_face"):
        return await handle_registration_photo(update, context)
    if context.user_data.get("current_task"):
        return await handle_task_photo(update, context)
    await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /gym_task")

async def handle_registration_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user = update.effective_user
    photo_file = await update.message.photo[-1].get_file()
    path = settings.TEMP_DIR / f"face_{user.id}.jpg"
    await photo_file.download_to_drive(path)

    if path.stat().st_size > settings.MAX_PHOTO_SIZE:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ.")
        path.unlink(missing_ok=True)
        return

    features = await extract_face_from_photo(path)
    if features is None:
        await update.message.reply_text("üòï –õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
        path.unlink(missing_ok=True)
        return

    with open(path, 'rb') as f:
        photo_bytes = f.read()

    async with Database.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO users (user_id, username, first_name, last_name, face_features, face_photo)
            VALUES ($1,$2,$3,$4,$5,$6)
            ON CONFLICT (user_id) DO UPDATE
            SET face_features = EXCLUDED.face_features,
                face_photo = EXCLUDED.face_photo
            """,
            user.id, user.username, user.first_name, user.last_name,
            pickle.dumps(features), photo_bytes
        )

    await update.message.reply_photo(photo=photo_bytes, caption="‚úÖ –õ–∏—Ü–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")

    context.user_data["awaiting_face"] = False
    context.user_data["awaiting_program"] = True
    await update.message.reply_text(
        "üìã –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–ª–∏ —Ü–µ–ª–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–±–∏—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.",
        reply_markup=main_keyboard()
    )

    path.unlink(missing_ok=True)

async def handle_task_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è"""
    user = update.effective_user
    task_id = context.user_data.get("current_task_id")
    task_text = context.user_data.get("current_task")

    if not task_id or not task_text:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
        return

    photo_file = await update.message.photo[-1].get_file()
    path = settings.TEMP_DIR / f"task_{user.id}.jpg"
    await photo_file.download_to_drive(path)

    try:
        with open(path, 'rb') as f:
            photo_bytes = f.read()

        # 1) –∏–∑–≤–ª–µ–∫–∞–µ–º —Ñ–∏—á–∏
        features = await extract_face_from_photo(path)
        if features is None:
            await update.message.reply_text("üòï –õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            return

        # 2) —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å —ç—Ç–∞–ª–æ–Ω–æ–º –∏–∑ –ë–î
        async with Database.acquire() as conn:
            ref_row = await conn.fetchrow(
                "SELECT face_features FROM users WHERE user_id = $1",
                user.id
            )

        if ref_row and ref_row["face_features"]:
            try:
                stored_features = pickle.loads(ref_row["face_features"])
                match, score = compare_faces(stored_features, features)
                if not match:
                    await update.message.reply_text("üö´ –õ–∏—Ü–æ –Ω–µ —Å–æ–≤–ø–∞–ª–æ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º. –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
                    return
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ª–∏—Ü: %s", e)

        # 3) GPT-–ø—Ä–æ–≤–µ—Ä–∫–∞ (–ø—É—Ç—å –¥–æ–ª–∂–µ–Ω —Å—É—â–µ—Å—Ç–≤–æ–≤–∞—Ç—å –¥–æ –≤—ã–∑–æ–≤–∞)
        gpt_result = await verify_task_with_gpt(task_text, str(path))
        if not gpt_result.get("success", False):
            reason = gpt_result.get("reason", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞.")
            await update.message.reply_text(f"‚ùå GPT –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {reason}")
            return

        # 4) –∞–ø–¥–µ–π—Ç –∑–∞–¥–∞—á–∏
        async with Database.acquire() as conn:
            await conn.execute(
                """
                UPDATE tasks
                SET status = 'completed',
                    completion_date = CURRENT_TIMESTAMP,
                    verification_photo = $1
                WHERE task_id = $2
                """,
                photo_bytes, task_id
            )

        # 5) —á–∏—Å—Ç–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        context.user_data["current_task"] = None
        context.user_data["current_task_id"] = None

        await update.message.reply_text("‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ! üèÜ", reply_markup=main_keyboard())

    finally:
        # —É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ü–µ
        Path(path).unlink(missing_ok=True)

async def gym_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    user = update.effective_user

    async with Database.acquire() as conn:
        user_row = await conn.fetchrow(
            "SELECT training_program FROM users WHERE user_id = $1",
            user.id
        )

    if not user_row:
        await message.reply_text("üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    training_program = user_row["training_program"]
    if not training_program:
        await message.reply_text("‚úçÔ∏è –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")
        context.user_data["awaiting_program"] = True
        return

    # —Ñ–∏–∫—Å: –ø–µ—Ä–µ–¥–∞—ë–º –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ —Ñ—É–Ω–∫—Ü–∏—é
    task = await generate_gpt_task(training_program)

    async with Database.acquire() as conn:
        task_id = await conn.fetchval(
            """
            INSERT INTO tasks (user_id, task_text, status)
            VALUES ($1,$2,'issued')
            RETURNING task_id
            """,
            user.id, task
        )

    context.user_data["current_task"] = task
    context.user_data["current_task_id"] = task_id

    await message.reply_text(
        f"üìã –ó–∞–¥–∞–Ω–∏–µ: {task}\nüì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.",
        reply_markup=main_keyboard(),
    )

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    user = update.effective_user
    async with Database.acquire() as conn:
        stats = await conn.fetchrow(
            """
            SELECT COUNT(t.task_id) AS total_tasks,
                   SUM(CASE WHEN t.status='completed' THEN 1 ELSE 0 END) AS completed_tasks,
                   u.registration_date
            FROM users u
            LEFT JOIN tasks t ON u.user_id = t.user_id
            WHERE u.user_id = $1
            GROUP BY u.user_id
            """,
            user.id
        )

    if not stats:
        await message.reply_text("üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    total = stats['total_tasks'] or 0
    comp = stats['completed_tasks'] or 0
    percent = (comp / total * 100) if total else 0

    await message.reply_text(
        f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {comp}/{total} ({percent:.0f}%)\n"
        f"üóìÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {stats['registration_date'].strftime('%d.%m.%Y')}",
        reply_markup=main_keyboard(),
    )

async def delete_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != settings.ADMIN_ID:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await Database.drop()
    await Database.init()
    await update.message.reply_text("üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞.")

async def send_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    async with Database.acquire() as conn:
        photo_bytes = await conn.fetchval(
            "SELECT face_photo FROM users WHERE user_id = $1", user.id
        )

    if not photo_bytes:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í—ã –µ—â—ë –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.")
        return

    await update.message.reply_photo(
        photo=photo_bytes,
        caption="–í–∞—à–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    )

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_program"):
        program = update.message.text.strip()
        async with Database.acquire() as conn:
            await conn.execute(
                "UPDATE users SET training_program=$1 WHERE user_id=$2",
                program, update.effective_user.id,
            )
        context.user_data["awaiting_program"] = False
        await update.message.reply_text("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=main_keyboard())
        return

    await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")
