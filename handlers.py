# handlers.py
import logging
import pickle
import json
import re
from datetime import datetime, timedelta, time
from pathlib import Path
import pytz
import aiohttp

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from telegram.ext import ContextTypes

from database import Database
from image_processor import extract_face_from_photo, compare_faces
from gpt_tasks import generate_gpt_task, verify_task_with_gpt
from config import settings

logger = logging.getLogger(__name__)

# ---------------- –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã/–Ω–∞—Å—Ç—Ä–æ–π–∫–∏ ----------------
WEEKDAYS_MAP = {
    '–ø–Ω': 'mon', '–ø–æ–Ω': 'mon', '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': 'mon',
    '–≤—Ç': 'tue', '–≤—Ç–æ—Ä–Ω–∏–∫': 'tue',
    '—Å—Ä': 'wed', '—Å—Ä–µ–¥–∞': 'wed',
    '—á—Ç': 'thu', '—á–µ—Ç–≤–µ—Ä–≥': 'thu',
    '–ø—Ç': 'fri', '–ø—è—Ç–Ω–∏—Ü–∞': 'fri',
    '—Å–±': 'sat', '—Å—É–±–±–æ—Ç–∞': 'sat',
    '–≤—Å': 'sun', '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ': 'sun'
}

# –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∞–π–º–∑–æ–Ω—É –≤ config.settings.TIMEZONE
TZ = pytz.timezone(getattr(settings, "TIMEZONE", "Europe/Moscow"))


# ---------------- –£—Ç–∏–ª–∏—Ç—ã ----------------
def main_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            [KeyboardButton("üì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ", web_app=WebAppInfo(url=str(settings.WEBAPP_URL)))],
            [KeyboardButton("üìä –ü—Ä–æ—Ñ–∏–ª—å")],
        ],
        resize_keyboard=True,
    )
def registration_form_text() -> str:
    return (
        "‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏ —Ü–µ–ª—è—Ö\n"
        "–ß—Ç–æ–±—ã —è –≤—ã–¥–∞–≤–∞–ª –∑–∞–¥–∞–Ω–∏—è —Ä–æ–≤–Ω–æ –ø–æ–¥ –≤–∞—Å (–∏ —á—Ç–æ–±—ã –∏—Ö –º–æ–∂–Ω–æ –±—ã–ª–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–¥–Ω–∏–º —Ñ–æ—Ç–æ), "
        "–æ—Ç–≤–µ—Ç—å—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ –ø–æ –ø—É–Ω–∫—Ç–∞–º. –ú–æ–∂–Ω–æ —Å–ø–∏—Å–∫–æ–º, –±–µ–∑ —Ä–æ–º–∞–Ω–æ–≤.\n\n"
        "1) –¶–µ–ª–∏ –Ω–∞ 1‚Äì2 –º–µ—Å—è—Ü–∞ (–Ω–µ—Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ)\n"
        "–ü–æ—Ö—É–¥–µ–Ω–∏–µ / –ù–∞–±–æ—Ä –º—ã—à—Ü / –°–∏–ª–∞ / –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å / –ë–æ–∫—Å / –û—Å–∞–Ω–∫–∞/—Å–ø–∏–Ω–∞/—à–µ—è / –î—Ä—É–≥–æ–µ: ___\n\n"
        "2) –û–ø—ã—Ç –∏ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è\n"
        "–£—Ä–æ–≤–µ–Ω—å: –Ω–æ–≤–∏—á–æ–∫ / —Å—Ä–µ–¥–Ω–∏–π / –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã–π\n"
        "–¢—Ä–∞–≤–º—ã/–±–æ–ª—å: ___\n"
        "–ß—Ç–æ –Ω–µ–ª—å–∑—è/–Ω–µ —Ö–æ—á—É: ___\n\n"
        "3) –î–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (–∑–∞–ª/–¥–æ–º, —á—Ç–æ –µ—Å—Ç—å?)\n\n"
        "4) –†–µ–∂–∏–º: —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é; –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: 20‚Äì30 / 40‚Äì60 / >60; "
        "–ø–ª–∞–≤–Ω—ã–π —Ä–µ–∂–∏–º –±–µ–∑ –∂—ë—Å—Ç–∫–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è: –¥–∞/–Ω–µ—Ç\n\n"
        "5) –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º (—à—Ç–∞–Ω–≥–∞/—Ç—Ä–µ–Ω–∞–∂—ë—Ä—ã/—Ç—É—Ä–Ω–∏–∫/–∫–∞—Ä–¥–∏–æ/–±–æ–∫—Å/—à–µ—è/–∫–æ—Ä/–¥—Ä—É–≥–æ–µ)\n\n"
        "6) –ß–µ–≥–æ –ù–ï –Ω–∞–¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞—Ç—å: ___\n\n"
        "7) –§–æ—Ç–æ-–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ: –ª–∏—Ü–æ –æ–∫? –¥–∞/–Ω–µ—Ç; —É–¥–æ–±–Ω–µ–µ: —Å–µ–ª—Ñ–∏ —É —Å–Ω–∞—Ä—è–¥–∞ / —Ñ–æ—Ç–æ —Å–Ω–∞—Ä—è–¥–∞; "
        "–º–æ–∂–Ω–æ —Ñ–æ—Ç–æ –±–ª–∏–Ω–æ–≤/–≥–∏—Ä–∏ —Å –≤–µ—Å–æ–º? –¥–∞/–Ω–µ—Ç\n\n"
        "8) –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞: –≤–µ—Å/–ø–æ–≤—Ç–æ—Ä—ã/–≤—Ä–µ–º—è/–¥–∏—Å—Ç–∞–Ω—Ü–∏—è/–ø—É–ª—å—Å/RPE? –ß—Ç–æ –≤–∞–∂–Ω–µ–µ –ª–∏—á–Ω–æ –≤–∞–º?\n\n"
        "9) –ú–∏–Ω–∏-—á–µ–ª–ª–µ–Ω–¥–∂–∏ –∏–Ω–æ–≥–¥–∞ –Ω—É–∂–Ω—ã? –¥–∞/–Ω–µ—Ç\n\n"
        "10) –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏: ___\n\n"
        "–ü–æ—Å–ª–µ –∞–Ω–∫–µ—Ç—ã —Å–ø—Ä–æ—à—É –¥–Ω–∏/–≤—Ä–µ–º—è –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π üí°"
    )

def _parse_time_hhmm(s: str) -> time | None:
    m = re.search(r'(\d{1,2})[:.](\d{2})', s)
    if not m:
        return None
    hh, mm = int(m.group(1)), int(m.group(2))
    if 0 <= hh < 24 and 0 <= mm < 60:
        return time(hour=hh, minute=mm)
    return None

def _parse_days(s: str) -> list[str]:
    s = s.strip().lower()
    if '–∫–∞–∂–¥—ã–π –¥–µ–Ω—å' in s or '–µ–∂–µ–¥–Ω–µ–≤' in s or '–≤—Å–µ –¥–Ω–∏' in s or '–ø–Ω-–≤—Å' in s:
        return ['mon','tue','wed','thu','fri','sat','sun']
    rng = re.search(r'(–ø–Ω|–ø–æ–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±|–≤—Å)\s*-\s*(–ø–Ω|–ø–æ–Ω|–≤—Ç|—Å—Ä|—á—Ç|–ø—Ç|—Å–±|–≤—Å)', s)
    if rng:
        a, b = WEEKDAYS_MAP[rng.group(1)], WEEKDAYS_MAP[rng.group(2)]
        order = ['mon','tue','wed','thu','fri','sat','sun']
        ia, ib = order.index(a), order.index(b)
        return order[ia:ib+1] if ia <= ib else order[ia:]+order[:ib+1]
    days = []
    for token in re.split(r'[,\s]+', s):
        if token in WEEKDAYS_MAP:
            days.append(WEEKDAYS_MAP[token])
    return list(dict.fromkeys(days))

def _dur_to_minutes(d: str) -> int:
    d = d.strip().replace('–º–∏–Ω', '').replace(' ', '').replace('‚Äî', '-')
    if '20-30' in d:
        return 30
    if '40-60' in d:
        return 60
    return 75  # >60


# ---------------- –¢–≤–æ–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã (—Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏) ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    async with Database.acquire() as conn:
        user_row = await conn.fetchrow(
            "SELECT training_program, training_form FROM users WHERE user_id = $1",
            user.id
        )
    if not user_row:
        await update.message.reply_text("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–µ–ª—Ñ–∏ üì∏ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        context.user_data["awaiting_face"] = True
        return
    elif not user_row["training_program"]:
        await update.message.reply_text("‚úçÔ∏è –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–ª–∏ —Ü–µ–ª—è—Ö.")
        context.user_data["awaiting_program"] = True
        return
    elif not user_row["training_form"]:
        context.user_data["awaiting_form"] = True
        await update.message.reply_text(registration_form_text())
        return
    else:
        await update.message.reply_text(
            "‚ÑπÔ∏è –í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –Ω–∏–∂–µ üí™",
            reply_markup=main_keyboard(),
        )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_face"):
        return await handle_registration_photo(update, context)
    if context.user_data.get("current_task"):
        return await handle_task_photo(update, context)
    await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –∏–ª–∏ /gym_task")

async def handle_registration_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    user = update.effective_user
    photo_file = await update.message.photo[-1].get_file()
    path = settings.TEMP_DIR / f"face_{user.id}.jpg"
    await photo_file.download_to_drive(path)

    if path.stat().st_size > settings.MAX_PHOTO_SIZE:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ.")
        path.unlink(missing_ok=True)
        return

    features = await extract_face_from_photo(path)
    if features is None:
        await update.message.reply_text("üòï –õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
        path.unlink(missing_ok=True)
        return

    with open(path, 'rb') as f:
        photo_bytes = f.read()

    async with Database.acquire() as conn:
        await conn.execute(
            """
            INSERT INTO users (user_id, username, first_name, last_name, face_features, face_photo)
            VALUES ($1,$2,$3,$4,$5,$6)
            ON CONFLICT (user_id) DO UPDATE
            SET face_features = EXCLUDED.face_features,
                face_photo = EXCLUDED.face_photo
            """,
            user.id, user.username, user.first_name, user.last_name,
            pickle.dumps(features), photo_bytes
        )

    await update.message.reply_photo(photo=photo_bytes, caption="‚úÖ –õ–∏—Ü–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")

    # --- –î–û–ë–ê–í–õ–ï–ù–û: –ø—Ä–æ—Å–∏–º –∏ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∏ –∞–Ω–∫–µ—Ç—É ---
    context.user_data["awaiting_face"] = False
    context.user_data["awaiting_program"] = True
    await update.message.reply_text(
        "üìã –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–≥—Ä–∞–º–º—É —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–ª–∏ —Ü–µ–ª–∏. –≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –ø–æ–¥–±–∏—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è.",
        reply_markup=main_keyboard()
    )
    context.user_data["awaiting_form"] = True
    await update.message.reply_text(registration_form_text())

    path.unlink(missing_ok=True)


async def _process_photo_bytes(user_id: int, photo_bytes: bytes, task_id: int | None, task_text: str | None, bot) -> bool:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ –∏ –∑–∞–¥–∞—á–∞ –∑–∞–∫—Ä—ã—Ç–∞."""
    from tempfile import NamedTemporaryFile
    with NamedTemporaryFile(suffix=".jpg", delete=False) as tmp:
        tmp.write(photo_bytes)
        tmp.flush()
        tmp_path = tmp.name
    try:
        features = await extract_face_from_photo(Path(tmp_path))
        if features is None:
            await bot.send_message(chat_id=user_id, text="üòï –õ–∏—Ü–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
            return False

        # 2) —Å–≤–µ—Ä–∫–∞ —Å —ç—Ç–∞–ª–æ–Ω–æ–º
        async with Database.acquire() as conn:
            ref_row = await conn.fetchrow("SELECT face_features FROM users WHERE user_id=$1", user_id)
        if ref_row and ref_row["face_features"]:
            try:
                stored_features = pickle.loads(ref_row["face_features"])
                match, _ = compare_faces(stored_features, features)
                if not match:
                    await bot.send_message(chat_id=user_id, text="üö´ –õ–∏—Ü–æ –Ω–µ —Å–æ–≤–ø–∞–ª–æ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º. –ü—Ä–∏—à–ª–∏—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.")
                    return False
            except Exception as e:
                logger.exception("–û—à–∏–±–∫–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ª–∏—Ü: %s", e)

        # 3) GPT‚Äë–ø—Ä–æ–≤–µ—Ä–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞–Ω–∏–µ)
        if task_text:
            gpt_result = await verify_task_with_gpt(task_text, tmp_path)
            if not gpt_result.get("success", False):
                reason = gpt_result.get("reason", "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞.")
                await bot.send_message(chat_id=user_id, text=f"‚ùå GPT –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞: {reason}")
                return False

        # 4) –∞–ø–¥–µ–π—Ç –∑–∞–¥–∞—á–∏ (–µ—Å–ª–∏ –±—ã–ª–∞)
        if task_id:
            async with Database.acquire() as conn:
                await conn.execute(
                    """
                    UPDATE tasks
                    SET status='completed', completion_date=CURRENT_TIMESTAMP, verification_photo=$1
                    WHERE task_id=$2
                    """,
                    photo_bytes, task_id
                )
        await bot.send_message(chat_id=user_id, text="‚úÖ –§–æ—Ç–æ –ø—Ä–∏–Ω—è—Ç–æ, –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞! üèÜ", reply_markup=main_keyboard())
        return True
    finally:
        try:
            Path(tmp_path).unlink(missing_ok=True)
        except Exception:
            pass

async def handle_task_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    task_id = context.user_data.get("current_task_id")
    task_text = context.user_data.get("current_task")
    if not task_id or not task_text:
        await update.message.reply_text("‚ö†Ô∏è –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è.")
        return
    photo_file = await update.message.photo[-1].get_file()
    photo_bytes = await photo_file.download_as_bytearray()
    await _process_photo_bytes(user.id, bytes(photo_bytes), task_id, task_text, context.bot)


async def handle_webapp_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.web_app_data:
        return
    try:
        payload = json.loads(update.message.web_app_data.data)
    except Exception:
        return
    if payload.get("type") != "photo_uploaded":
        return
    token = payload.get("token")
    if not token:
        return

    user_id = update.effective_user.id

    # —Ç—è–Ω–µ–º —Ñ–∞–π–ª —Å –≤–∞—à–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
    pull_url = f"{settings.WEBAPP_API_PULL_URL}?token={token}"
    async with aiohttp.ClientSession() as sess:
        async with sess.get(pull_url, timeout=30) as r:
            if r.status != 200:
                await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ —Å —Å–µ—Ä–≤–µ—Ä–∞.")
                return
            photo_bytes = await r.read()

    # –±–µ—Ä—ë–º –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–µ—Å–ª–∏ –µ—Å—Ç—å) –∏–∑ –ë–î –∏–ª–∏ –∏–∑ user_data
    async with Database.acquire() as conn:
        row = await conn.fetchrow(
            """
            SELECT task_id, task_text FROM tasks
            WHERE user_id=$1 AND status='issued'
            ORDER BY task_id DESC LIMIT 1
            """,
            user_id
        )
    task_id = row["task_id"] if row else context.user_data.get("current_task_id")
    task_text = row["task_text"] if row else context.user_data.get("current_task")

    await _process_photo_bytes(user_id, photo_bytes, task_id, task_text, context.bot)

async def gym_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    user = update.effective_user

    async with Database.acquire() as conn:
        user_row = await conn.fetchrow(
            "SELECT training_program FROM users WHERE user_id = $1",
            user.id
        )

    if not user_row:
        await message.reply_text("üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
        return

    training_program = user_row["training_program"]
    if not training_program:
        await message.reply_text("‚úçÔ∏è –°–Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–≤–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç.")
        context.user_data["awaiting_program"] = True
        return

    # —Ñ–∏–∫—Å: –ø–µ—Ä–µ–¥–∞—ë–º –ø—Ä–æ–≥—Ä–∞–º–º—É –≤ —Ñ—É–Ω–∫—Ü–∏—é
    task = await generate_gpt_task(training_program)

    async with Database.acquire() as conn:
        task_id = await conn.fetchval(
            """
            INSERT INTO tasks (user_id, task_text, status)
            VALUES ($1,$2,'issued')
            RETURNING task_id
            """,
            user.id, task
        )

    context.user_data["current_task"] = task
    context.user_data["current_task_id"] = task_id

    await message.reply_text(
        f"üìã –ó–∞–¥–∞–Ω–∏–µ: {task}\n\n–ù–∞–∂–º–∏ ‚Äòüì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ‚Äô –≤–Ω–∏–∑—É, —è –ø—Ä–æ–≤–µ—Ä—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        reply_markup=main_keyboard(),
    )

async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query.message
    user = update.effective_user

    async with Database.acquire() as conn:
        urow = await conn.fetchrow(
            """
            SELECT face_photo, registration_date, training_program, training_form,
                   reminder_enabled, reminder_days, reminder_time, reminder_duration
            FROM users WHERE user_id = $1
            """,
            user.id
        )

        if not urow:
            await message.reply_text("üö´ –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start")
            return

        trow = await conn.fetchrow(
            """
            SELECT
                COUNT(*) AS total_tasks,
                COALESCE(SUM(CASE WHEN status = 'completed' THEN 1 ELSE 0 END), 0) AS completed_tasks
            FROM tasks
            WHERE user_id = $1
            """,
            user.id
        )

    total = int(trow["total_tasks"] or 0)
    comp = int(trow["completed_tasks"] or 0)
    percent = (comp / total * 100) if total else 0

    # –§–æ—Ä–º–∏—Ä—É–µ–º –±–ª–æ–∫ –∞–Ω–∫–µ—Ç—ã
    training_form_str = ""
    if urow["training_form"]:
        try:
            form_data = json.loads(urow["training_form"])
            training_form_str = form_data.get("raw", "")
        except Exception:
            training_form_str = str(urow["training_form"])

    reminders_str = "‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã"
    if urow["reminder_enabled"]:
        days_str = " ".join(urow["reminder_days"] or [])
        time_str = urow["reminder_time"].strftime("%H:%M") if urow["reminder_time"] else "‚Äî"
        dur_str = f"{urow['reminder_duration']} –º–∏–Ω"
        reminders_str = f"‚úÖ {days_str} –≤ {time_str}, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å {dur_str}"

    caption = (
        f"üìä –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {comp}/{total} ({percent:.0f}%)\n"
        f"üóìÔ∏è –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: {urow['registration_date'].strftime('%d.%m.%Y') if urow.get('registration_date') else '‚Äî'}\n\n"
        # f"üèãÔ∏è –ó–∞–¥–∞–Ω–∏—è:\n{urow['training_program'] or '‚Äî'}\n\n"
        f"üìã –ê–Ω–∫–µ—Ç–∞:\n{training_form_str or '‚Äî'}\n\n"
        f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {reminders_str}"
    )

    photo_bytes = urow.get("face_photo")
    if photo_bytes:
        await message.reply_photo(
            photo=photo_bytes,
            caption=caption,
            reply_markup=main_keyboard(),
        )
    else:
        await message.reply_text(
            caption,
            reply_markup=main_keyboard(),
        )


async def delete_db(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id != settings.ADMIN_ID:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return
    await Database.drop()
    await Database.init()
    await update.message.reply_text("üóëÔ∏è –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É–¥–∞–ª–µ–Ω–∞.")

async def send_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    async with Database.acquire() as conn:
        photo_bytes = await conn.fetchval(
            "SELECT face_photo FROM users WHERE user_id = $1", user.id
        )

    if not photo_bytes:
        await update.message.reply_text("‚ö†Ô∏è –§–æ—Ç–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í—ã –µ—â—ë –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å.")
        return

    await update.message.reply_photo(
        photo=photo_bytes,
        caption="–í–∞—à–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–µ —Ñ–æ—Ç–æ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"
    )

# --------- –ù–û–í–û–ï: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–∫–µ—Ç—ã –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---------
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # 1) –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–≤–æ–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã (–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∫–∞–∫ –±—ã–ª–æ)
    if context.user_data.get("awaiting_program"):
        program = update.message.text.strip()
        async with Database.acquire() as conn:
            await conn.execute(
                "UPDATE users SET training_program=$1 WHERE user_id=$2",
                program, update.effective_user.id,
            )
        context.user_data["awaiting_program"] = False
        await update.message.reply_text("‚úÖ –ü—Ä–æ–≥—Ä–∞–º–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!", reply_markup=main_keyboard())
        # –Ω–µ –≤—ã—Ö–æ–¥–∏–º ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å—Ä–∞–∑—É –ø—Ä–∏—Å–ª–∞—Ç—å –∏ –∞–Ω–∫–µ—Ç—É

    text = (update.message.text or "").strip()

    # 2) –ê–Ω–∫–µ—Ç–∞ (–Ω–æ–≤–æ–µ)
    if context.user_data.get("awaiting_form"):
        async with Database.acquire() as conn:
            await conn.execute(
                "UPDATE users SET training_form=$1 WHERE user_id=$2",
                json.dumps({"raw": text}, ensure_ascii=False),
                update.effective_user.id
            )
        context.user_data["awaiting_form"] = False
        context.user_data["awaiting_reminder_days"] = True
        await update.message.reply_text(
            "üóìÔ∏è –í –∫–∞–∫–∏–µ –¥–Ω–∏ –æ–±—ã—á–Ω–æ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è? –ü—Ä–∏–º–µ—Ä—ã: ¬´–ø–Ω —Å—Ä –ø—Ç¬ª, ¬´–ø–Ω-–ø—Ç¬ª, ¬´–∫–∞–∂–¥—ã–π –¥–µ–Ω—å¬ª."
        )
        return

    # 3) –î–Ω–∏ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if context.user_data.get("awaiting_reminder_days"):
        days = _parse_days(text)
        if not days:
            await update.message.reply_text("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª –¥–Ω–∏. –ü—Ä–∏–º–µ—Ä: ¬´–ø–Ω —Å—Ä –ø—Ç¬ª, ¬´–ø–Ω-–ø—Ç¬ª, ¬´–∫–∞–∂–¥—ã–π –¥–µ–Ω—å¬ª.")
            return
        context.user_data["reminder_days"] = days
        context.user_data["awaiting_reminder_days"] = False
        context.user_data["awaiting_reminder_time"] = True
        await update.message.reply_text("‚è∞ –í–æ —Å–∫–æ–ª—å–∫–æ –æ–±—ã—á–Ω–æ –Ω–∞—á–∏–Ω–∞–µ—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É? (–Ω–∞–ø—Ä–∏–º–µ—Ä, 19:30)")
        return

    # 4) –í—Ä–µ–º—è
    if context.user_data.get("awaiting_reminder_time"):
        t = _parse_time_hhmm(text)
        if not t:
            await update.message.reply_text("–ù–µ –ø–æ–Ω—è–ª –≤—Ä–µ–º—è. –ü—Ä–∏–º–µ—Ä: 19:30")
            return
        context.user_data["reminder_time"] = t
        context.user_data["awaiting_reminder_time"] = False
        context.user_data["awaiting_reminder_duration"] = True
        await update.message.reply_text("‚è±Ô∏è –í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 45")
        return

    # 5) –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å + –≤–∫–ª—é—á–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    if context.user_data.get("awaiting_reminder_duration"):
        try:
            dur_min = int(re.sub(r'\D', '', text))  # –≤—ã—Ç–∞—â–∏–º —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞
            if dur_min <= 0:
                raise ValueError
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö, –Ω–∞–ø—Ä–∏–º–µ—Ä: 45")
            return

        user_id = update.effective_user.id
        days = context.user_data["reminder_days"]
        t: time = context.user_data["reminder_time"]

        async with Database.acquire() as conn:
            await conn.execute(
                """
                UPDATE users
                SET reminder_enabled = TRUE,
                    reminder_days = $1,
                    reminder_time = $2,
                    reminder_duration = $3
                WHERE user_id = $4
                """,
                days, t, str(dur_min), user_id
            )

        _schedule_reminders(context, user_id, days, t, dur_min)
        context.user_data["awaiting_reminder_duration"] = False
        await update.message.reply_text(
            f"‚úÖ –ê–Ω–∫–µ—Ç–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã –Ω–∞ {dur_min} –º–∏–Ω—É—Ç.",
            reply_markup=main_keyboard()
        )
        return



    # 6) –í—Å—ë –ø—Ä–æ—á–µ–µ
    await update.message.reply_text("‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã.")

# --------- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---------
def _schedule_reminders(context: ContextTypes.DEFAULT_TYPE, user_id: int, days: list[str], t: time, dur: int):
    jq = getattr(context.application, "job_queue", None)
    if jq is None:
        logger.warning("JobQueue is not available; skipping reminders for user %s", user_id)
        return

    # –°–Ω–æ—Å–∏–º —Å—Ç–∞—Ä—ã–µ –¥–∂–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    try:
        for job in jq.jobs():
            if (job.name or "").startswith(f"{user_id}:"):
                job.schedule_removal()
    except Exception as e:
        logger.exception("Failed to list/remove jobs: %s", e)

    mid_time = (datetime.combine(datetime.now().date(), t) + timedelta(minutes=dur // 2)).time()
    end_time = (datetime.combine(datetime.now().date(), t) + timedelta(minutes=dur)).time()

    async def _create_new_task_and_prompt(ctx: ContextTypes.DEFAULT_TYPE, phase_text: str):
        """
        –í–°–ï–ì–î–ê —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–¥–∞–∂–µ –µ—Å–ª–∏ –±—ã–ª–æ —Å—Ç–∞—Ä–æ–µ),
        —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –ë–î –∏ —Å—Ç–∞–≤–∏—Ç –∫–∞–∫ –∞–∫—Ç–∏–≤–Ω–æ–µ, –∑–∞—Ç–µ–º –ø—Ä–æ—Å–∏—Ç —Ñ–æ—Ç–æ.
        """
        try:
            # 1) —Ç—è–Ω–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É
            async with Database.acquire() as conn:
                row = await conn.fetchrow(
                    "SELECT training_program FROM users WHERE user_id = $1",
                    user_id
                )

            if not row or not row["training_program"]:
                await ctx.bot.send_message(
                    chat_id=user_id,
                    text=f"{phase_text}\n(–Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Äî –æ—Ç–ø—Ä–∞–≤—å –µ—ë —Ç–µ–∫—Å—Ç–æ–º –∫–æ–º–∞–Ω–¥–æ–π /start)"
                )
                return

            training_program = row["training_program"]

            # 2) –≥–µ–Ω–µ—Ä–∏–º –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
            task_text = await generate_gpt_task(training_program)

            # 3) –ø–∏—à–µ–º –≤ –ë–î
            async with Database.acquire() as conn:
                task_id = await conn.fetchval(
                    """
                    INSERT INTO tasks (user_id, task_text, status)
                    VALUES ($1,$2,'issued')
                    RETURNING task_id
                    """,
                    user_id, task_text
                )

            # 4) –¥–µ–ª–∞–µ–º –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º (–ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ä–æ–µ)
            ud = ctx.application.bot_data.setdefault("user_tasks", {})
            ud[user_id] = {
                "current_task": task_text,
                "current_task_id": task_id
            }

            # 5) –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await ctx.bot.send_message(
                chat_id=user_id,
                text=(f"{phase_text}\n\n"
                      f"üìã –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: {task_text}\n\n"
                      "–ù–∞–∂–º–∏ ‚Äòüì∏ –°–¥–µ–ª–∞—Ç—å —Ñ–æ—Ç–æ‚Äô ‚Äî –∫–∞–º–µ—Ä–∞ –æ—Ç–∫—Ä–æ–µ—Ç—Å—è –∏ —á–µ—Ä–µ–∑ 3 —Å–µ–∫. —è —Å–¥–µ–ª–∞—é –∫–∞–¥—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
            )
        except Exception as e:
            logger.exception("_create_new_task_and_prompt failed for user %s: %s", user_id, e)
            try:
                await ctx.bot.send_message(chat_id=user_id, text=f"{phase_text}\n(–æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è)")
            except Exception:
                pass

    async def start_cb(ctx: ContextTypes.DEFAULT_TYPE):
        await _create_new_task_and_prompt(ctx, "üèÅ –°—Ç–∞—Ä—Ç —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏!")

    async def mid_cb(ctx: ContextTypes.DEFAULT_TYPE):
        await _create_new_task_and_prompt(ctx, "‚è≥ –°–µ—Ä–µ–¥–∏–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.")

    async def end_cb(ctx: ContextTypes.DEFAULT_TYPE):
        await _create_new_task_and_prompt(ctx, "‚úÖ –ö–æ–Ω–µ—Ü —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ‚Äî —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.")

    day_index = {'mon':0,'tue':1,'wed':2,'thu':3,'fri':4,'sat':5,'sun':6}
    for d in days:
        if d not in day_index:
            continue
        wd = day_index[d]
        jq.run_daily(start_cb, time=t,        days=(wd,), name=f"{user_id}:start:{d}")
        jq.run_daily(mid_cb,   time=mid_time, days=(wd,), name=f"{user_id}:mid:{d}")
        jq.run_daily(end_cb,   time=end_time, days=(wd,), name=f"{user_id}:end:{d}")

    logger.info("Scheduled reminders+new-tasks for user=%s days=%s at=%s dur=%s min", user_id, days, t, dur)


# --------- –ü–æ –∂–µ–ª–∞–Ω–∏—é: –∫–æ–º–∞–Ω–¥–∞ –∑–∞–Ω–æ–≤–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è ---------
async def setup_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["awaiting_reminder_days"] = True
    await update.message.reply_text(
        "üóìÔ∏è –û–±–Ω–æ–≤–∏–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ. –í –∫–∞–∫–∏–µ –¥–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä—É–µ—à—å—Å—è? (–ø–Ω —Å—Ä –ø—Ç / –ø–Ω-–ø—Ç / –∫–∞–∂–¥—ã–π –¥–µ–Ω—å)"
    )
