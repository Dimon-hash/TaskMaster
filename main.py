# main.py
import os
import sys
import asyncio
import logging
from typing import Optional
from zoneinfo import ZoneInfo

from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from starlette.responses import PlainTextResponse, JSONResponse

from telegram import Update
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    filters, Defaults,
)

# ---- —Ç–≤–æ–∏ –º–æ–¥—É–ª–∏
from database import Database
import handlers


# ===================== ENV =====================
TELEGRAM_TOKEN: Optional[str] = os.getenv("TELEGRAM_TOKEN")
PUBLIC_BASE_URL: str = (os.getenv("PUBLIC_BASE_URL") or "").rstrip("/")
WEBHOOK_SECRET: str = os.getenv("WEBHOOK_SECRET_TOKEN", "supersecret")
TIMEZONE_NAME: str = os.getenv("TIMEZONE", "Europe/Moscow")

# –ö–æ–Ω–µ—á–Ω—ã–π –ø—É—Ç—å –≤–µ–±—Ö—É–∫–∞. –ü—Ä–∏–º–µ—Ä: /tg/webhook/supersecret
WEBHOOK_PATH = f"/tg/webhook/{WEBHOOK_SECRET}"


# ===================== LOGGING =====================
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(name)s | %(message)s"
)
log = logging.getLogger("main")


# ===================== FASTAPI =====================
app = FastAPI(title="TaskMaster Bot API")

# (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) ‚Äî –µ—Å–ª–∏ —Ç—ã –æ—Ç–∫—Ä—ã–≤–∞–µ—à—å WebApp —Å–æ —Å–≤–æ–µ–≥–æ —Ñ—Ä–æ–Ω—Ç–∞/–¥–æ–º–µ–Ω–∞
# –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å CORS –Ω–∞ –Ω—É–∂–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏
allow_origins = []
if PUBLIC_BASE_URL.startswith("https://"):
    # —Ä–∞–∑—Ä–µ—à–∏–º —Å–∞–º–æ–º—É —Å–µ–±–µ (–º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å–ø–∏—Å–∫–æ–º –¥–æ–º–µ–Ω–æ–≤)
    allow_origins = [PUBLIC_BASE_URL]

app.add_middleware(
    CORSMiddleware,
    allow_origins=allow_origins or ["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# PTB Application –¥–µ—Ä–∂–∏–º –≥–ª–æ–±–∞–ª—å–Ω–æ (–∂–∏–≤—ë—Ç –ø–æ–∫–∞ –∂–∏–≤—ë—Ç –ø—Ä–æ—Ü–µ—Å—Å)
tg_app: Optional[Application] = None
TZ = ZoneInfo(TIMEZONE_NAME)


# ===================== ROUTES =====================
@app.get("/health")
async def health():
    return PlainTextResponse("ok")


@app.get("/")
async def root():
    # –ù–µ–±–æ–ª—å—à–æ–π –ø–∏–Ω–≥-—ç–Ω–¥–ø–æ–∏–Ω—Ç, —á—Ç–æ–±—ã –≤–∏–¥–µ—Ç—å, —á—Ç–æ —Å–µ—Ä–≤–∏—Å –∂–∏–≤
    return JSONResponse({"ok": True, "service": "taskmaster-bot", "webhook_path": WEBHOOK_PATH})


@app.post(WEBHOOK_PATH)
async def telegram_webhook(request: Request):
    """
    –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –≤–µ–±—Ö—É–∫–∞ Telegram. Render –±—É–¥–µ—Ç —Å–ª–∞—Ç—å —Å—é–¥–∞ POST –æ—Ç Telegram.
    """
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å: —Å–≤–µ—Ä—è–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ Telegram
    if request.headers.get("X-Telegram-Bot-Api-Secret-Token") != WEBHOOK_SECRET:
        return PlainTextResponse("forbidden", status_code=403)

    if tg_app is None:
        return PlainTextResponse("not ready", status_code=503)

    try:
        data = await request.json()
    except Exception:
        return PlainTextResponse("bad request", status_code=400)

    try:
        update = Update.de_json(data, tg_app.bot)
    except Exception as e:
        log.exception("Update.de_json failed: %s", e)
        return PlainTextResponse("bad update", status_code=400)

    await tg_app.process_update(update)
    return PlainTextResponse("ok")


# ===================== STARTUP / SHUTDOWN =====================
@app.on_event("startup")
async def on_startup():
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ë–î –∏ Telegram Application, —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —Ö–µ–Ω–¥–ª–µ—Ä—ã
    –∏ —Å—Ç–∞–≤–∏—Ç –≤–µ–±—Ö—É–∫ –Ω–∞ PUBLIC_BASE_URL + WEBHOOK_PATH.
    """
    global tg_app

    # Windows-–ø–æ–ª–∏—Ç–∏–∫–∞ (–Ω–µ –º–µ—à–∞–µ—Ç –Ω–∞ Linux/Render)
    if sys.platform.startswith("win"):
        try:
            asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())
        except Exception:
            pass

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    try:
        await Database.init()
        log.info("Database initialized")
    except Exception as e:
        log.exception("Database.init() failed: %s", e)

    if not TELEGRAM_TOKEN:
        log.error("TELEGRAM_TOKEN –Ω–µ –∑–∞–¥–∞–Ω ‚Äî –±–æ—Ç –Ω–µ –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω")
        return

    # –°–æ–±–∏—Ä–∞–µ–º PTB App
    tg_app = (
        Application.builder()
        .token(TELEGRAM_TOKEN)
        .defaults(Defaults(tzinfo=TZ))
        .build()
    )

    # ---------- –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ç–≤–æ–∏ —Ö–µ–Ω–¥–ª–µ—Ä—ã –∏–∑ handlers ----------
    # WebApp data
    if hasattr(handlers, "handle_webapp_data"):
        tg_app.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, handlers.handle_webapp_data))

    # –ö–æ–º–∞–Ω–¥—ã
    if hasattr(handlers, "start"):
        tg_app.add_handler(CommandHandler("start", handlers.start))
    if hasattr(handlers, "profile"):
        tg_app.add_handler(CommandHandler("profile", handlers.profile))

    # –ê–¥–º–∏–Ω/—Å–µ—Ä–≤–∏—Å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã)
    if hasattr(handlers, "clear_db"):
        tg_app.add_handler(CommandHandler("clear_db", handlers.clear_db))
    if hasattr(handlers, "delete_db"):
        tg_app.add_handler(CommandHandler("delete_db", handlers.delete_db))
    if hasattr(handlers, "reminders"):
        tg_app.add_handler(CommandHandler("reminders", handlers.reminders))
    if hasattr(handlers, "start_workout"):
        tg_app.add_handler(CommandHandler("start_workout", handlers.start_workout))
    if hasattr(handlers, "end_workout"):
        tg_app.add_handler(CommandHandler("end_workout", handlers.end_workout))

    # –ú–µ–¥–∏–∞: —Ñ–æ—Ç–æ/–∫–∞—Ä—Ç–∏–Ω–∫–∏ –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
    if hasattr(handlers, "register_photo"):
        tg_app.add_handler(
            MessageHandler((filters.PHOTO | filters.Document.IMAGE) & ~filters.COMMAND, handlers.register_photo)
        )

    # Callback-–∫–Ω–æ–ø–∫–∏ –¥–µ–ø–æ–∑–∏—Ç–∞
    if hasattr(handlers, "deposit_callback"):
        tg_app.add_handler(
            CallbackQueryHandler(
                handlers.deposit_callback,
                pattern=r"^(depwin_|depforf_)", block=True
            )
        )

    # –ò–Ω–ª–∞–π–Ω —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –ø—Ä.
    if hasattr(handlers, "register_callback"):
        tg_app.add_handler(
            CallbackQueryHandler(
                handlers.register_callback,
                pattern=r"^(ob_next$|qa_begin$|days_|time_|rest|dur_|dep_(ok|custom)$)",
                block=True
            )
        )

    # –î–æ–ø. –º–µ–Ω—é-–∫–æ–ª–ª–±—ç–∫–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
    if hasattr(handlers, "menu_callback"):
        tg_app.add_handler(CallbackQueryHandler(handlers.menu_callback, block=False))

    # –ö–Ω–æ–ø–∫–∞ ¬´–ü—Ä–æ—Ñ–∏–ª—å¬ª (—Ç–µ–∫—Å—Ç –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
    if hasattr(handlers, "profile"):
        tg_app.add_handler(MessageHandler(filters.Regex(r"^üìä –ü—Ä–æ—Ñ–∏–ª—å$"), handlers.profile))

    # –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç–µ—Ä ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–º
    if hasattr(handlers, "handle_text"):
        tg_app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handlers.handle_text))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º PTB (–±–µ–∑ polling)
    await tg_app.initialize()

    # –°—Ç–∞–≤–∏–º –≤–µ–±—Ö—É–∫, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É–±–ª–∏—á–Ω—ã–π –±–∞–∑–æ–≤—ã–π URL
    if PUBLIC_BASE_URL:
        url = f"{PUBLIC_BASE_URL}{WEBHOOK_PATH}"
        try:
            await tg_app.bot.set_webhook(
                url=url,
                secret_token=WEBHOOK_SECRET,
                allowed_updates=["message", "callback_query"],
            )
            log.info("Webhook set to %s", url)
        except Exception as e:
            log.exception("set_webhook failed: %s", e)
    else:
        log.warning("PUBLIC_BASE_URL –ø—É—Å—Ç ‚Äî –≤–µ–±—Ö—É–∫ –ù–ï –≤–∫–ª—é—á—ë–Ω (–Ω–∞ Render –≤–µ–±—Ö—É–∫ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω).")


@app.on_event("shutdown")
async def on_shutdown():
    """
    –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–≤–µ—Ä—à–∞–µ–º PTB –∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ) —Å–Ω–∏–º–∞–µ–º –≤–µ–±—Ö—É–∫.
    """
    global tg_app
    try:
        if tg_app is not None:
            try:
                # –Ω–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–Ω–∏–º–∞—Ç—å –≤–µ–±—Ö—É–∫ –Ω–∞ Render, –Ω–æ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π:
                if PUBLIC_BASE_URL:
                    await tg_app.bot.delete_webhook(drop_pending_updates=False)
            except Exception:
                pass
            try:
                await tg_app.shutdown()
            finally:
                tg_app = None
    except Exception as e:
        log.exception("shutdown error: %s", e)
