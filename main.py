import os
import pickle
import cv2
from openai import OpenAI

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)
from ultralytics import YOLO
import urllib.request

os.environ["OPENAI_API_KEY"] = "sk-aitunnel-omeCzGWxkHPU0cPnADKnWe481LTigfBf"
client = OpenAI()

# --- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ GPT ---
async def generate_gpt_task():
    prompt = """
    –ü—Ä–∏–¥—É–º–∞–π –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–ø–æ—Ä—Ç–∑–∞–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ. –£—Å–ª–æ–≤–∏—è:
    1. –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å (—à—Ç–∞–Ω–≥–∞, –≥–∞–Ω—Ç–µ–ª–∏, —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã).
    2. –£–∫–∞–∂–∏ –¥–µ—Ç–∞–ª–∏: –≤–µ—Å, —Ä–∞–∫—É—Ä—Å, –¥–µ–π—Å—Ç–≤–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "—Å–µ–ª—Ñ–∏ —Å –≥–∞–Ω—Ç–µ–ª–µ–π 12 –∫–≥ –≤ –ª–µ–≤–æ–π —Ä—É–∫–µ").
    3. –ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –æ–¥–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
    4. –ò–∑–±–µ–≥–∞–π —à–∞–±–ª–æ–Ω–æ–≤. –ë—É–¥—å –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–º!
    """

    try:
        response = client.chat.completions.create(  # –ù–æ–≤—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return "–°–µ–ª—Ñ–∏ —Å –≥–∞–Ω—Ç–µ–ª–µ–π 12 –∫–≥ –≤ –ø—Ä–∞–≤–æ–π —Ä—É–∫–µ."


# --- –ö–æ–º–∞–Ω–¥–∞ /gym_task ---
async def gym_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task = await generate_gpt_task()
    await update.message.reply_text(
        f"üéØ *–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:*\n\n{task}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!",
        parse_mode="Markdown"
    )
    context.user_data["current_task"] = task  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ ---
def init_face_cascade():
    # –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Å–∫–∞–¥–∞
    cascade_path = "haarcascade_frontalface_default.xml"

    # –ï—Å–ª–∏ —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if os.path.exists(cascade_path):
        classifier = cv2.CascadeClassifier(cascade_path)
        if not classifier.empty():
            return classifier

    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤ –ø–∞–∫–µ—Ç–µ opencv
    try:
        opencv_path = os.path.join(cv2.data.haarcascades, cascade_path)
        if os.path.exists(opencv_path):
            classifier = cv2.CascadeClassifier(opencv_path)
            if not classifier.empty():
                return classifier
    except Exception:
        pass

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ - —Å–∫–∞—á–∏–≤–∞–µ–º —Å GitHub
    try:
        url = "https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalface_default.xml"
        urllib.request.urlretrieve(url, cascade_path)
        classifier = cv2.CascadeClassifier(cascade_path)
        if not classifier.empty():
            return classifier
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Å–∫–∞–¥–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {e}")

    return None


face_cascade = init_face_cascade()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è YOLO
model = YOLO("yolov8l.pt")  # –ú–æ–¥–µ–ª—å –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç—Ä–µ–Ω–∞–∂–µ—Ä–æ–≤
GYM_EQUIPMENT_CLASSES = ["chair", "bench"]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü
FACE_DATA_DIR = "face_data"
os.makedirs(FACE_DATA_DIR, exist_ok=True)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏—Ü–∞–º–∏
def load_face_database():
    try:
        with open(os.path.join(FACE_DATA_DIR, "faces.pkl"), "rb") as f:
            return pickle.load(f)
    except (FileNotFoundError, EOFError):
        return {"features": [], "names": []}


def save_face_database(database):
    with open(os.path.join(FACE_DATA_DIR, "faces.pkl"), "wb") as f:
        pickle.dump(database, f)


def extract_face_features(image, face):
    (x, y, w, h) = face
    face_roi = image[y:y + h, x:x + w]
    return cv2.resize(face_roi, (100, 100)).flatten()


def compare_faces(features1, features2, threshold=0.7):
    mse = ((features1 - features2) ** 2).mean()
    return mse < threshold


def draw_faces(image_path, faces, names):
    image = cv2.imread(image_path)
    for (x, y, w, h), name in zip(faces, names):
        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
        cv2.putText(image, name, (x, y - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
    output_path = "output_" + os.path.basename(image_path)
    cv2.imwrite(output_path, image)
    return output_path


# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É:\n"
        "1. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã –Ω–∞ —Ñ–æ—Ç–æ (–ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ)\n"
        "2. –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –ª–∏—Ü–∞ (–∏—Å–ø–æ–ª—å–∑—É–π /nameface <–∏–º—è> —á—Ç–æ–±—ã –Ω–∞–∑–≤–∞—Ç—å –ª–∏—Ü–æ)"
    )


async def list_faces(update: Update, context: ContextTypes.DEFAULT_TYPE):
    face_db = load_face_database()

    if not face_db["names"]:
        await update.message.reply_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–∏—Ü.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏–º–µ–Ω
    faces_list = "\n".join(
        f"{i + 1}. {name}" for i, name in enumerate(face_db["names"])
    )

    await update.message.reply_text(
        "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞:\n" + faces_list,
        parse_mode='Markdown'
    )

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–æ—Ç–æ
        photo_file = await update.message.photo[-1].get_file()
        photo_path = f"temp_{update.message.message_id}.jpg"
        await photo_file.download_to_drive(photo_path)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Ç—Ä–µ–Ω–∞–∂–µ—Ä—ã
        results = model(photo_path)
        class_name_pr = ""
        found_equipment = False

        for result in results:
            for box in result.boxes:
                class_name = result.names[int(box.cls)]
                class_name_pr += class_name + " "
                if class_name in GYM_EQUIPMENT_CLASSES:
                    found_equipment = True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ª–∏—Ü–∞ —Å –ø–æ–º–æ—â—å—é OpenCV
        face_message = ""
        if face_cascade is not None:
            try:
                image = cv2.imread(photo_path)
                if image is None:
                    raise ValueError("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

                gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
                faces = face_cascade.detectMultiScale(gray, scaleFactor=1.1, minNeighbors=5, minSize=(30, 30))

                if len(faces) > 0:
                    face_db = load_face_database()
                    recognized_names = []

                    for (x, y, w, h) in faces:
                        features = extract_face_features(gray, (x, y, w, h))
                        name = "Unknown"

                        for i, db_features in enumerate(face_db["features"]):
                            if compare_faces(features, db_features):
                                name = face_db["names"][i]
                                break

                        if name == "Unknown":
                            name = f"User_{update.message.from_user.id}_{len(face_db['features'])}"
                            face_db["features"].append(features)
                            face_db["names"].append(name)
                            save_face_database(face_db)

                        recognized_names.append(name)

                    output_path = draw_faces(photo_path, faces, recognized_names)
                    await update.message.reply_photo(
                        photo=open(output_path, "rb"),
                        caption=f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–µ –ª–∏—Ü–∞: {', '.join(recognized_names)}"
                    )
                    os.remove(output_path)
                    face_message = f"\n\n–ù–∞–π–¥–µ–Ω—ã –ª–∏—Ü–∞: {', '.join(recognized_names)}"
                else:
                    face_message = "\n\n–õ–∏—Ü–∞ –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã."
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ª–∏—Ü: {e}")
                face_message = "\n\n–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ –ª–∏—Ü."
        else:
            face_message = "\n\n–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ª–∏—Ü –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ (–∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω)."

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        response = f"{'‚úÖ –î–∞' if found_equipment else '‚ùå –ù–µ—Ç'}, –Ω–∞ —Ñ–æ—Ç–æ {'–µ—Å—Ç—å —Ç—Ä–µ–Ω–∞–∂—ë—Ä' if found_equipment else '–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ —Ç—Ä–µ–Ω–∞–∂—ë—Ä–æ–≤'}! {class_name_pr}{face_message}"
        await update.message.reply_text(response)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    finally:
        if os.path.exists(photo_path):
            os.remove(photo_path)


async def rename_face(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text(
            "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /renameface <–Ω–æ–º–µ—Ä> <–Ω–æ–≤–æ–µ_–∏–º—è>\n"
            "–ü—Ä–∏–º–µ—Ä: /renameface 2 NewName\n\n"
            "–°–Ω–∞—á–∞–ª–∞ –ø–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ª–∏—Ü —á–µ—Ä–µ–∑ /listfaces"
        )
        return

    try:
        face_num = int(context.args[0]) - 1  # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤ 0-based –∏–Ω–¥–µ–∫—Å
        new_name = ' '.join(context.args[1:])

        face_db = load_face_database()

        if face_num < 0 or face_num >= len(face_db["names"]):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∏—Ü–∞!")
            return

        old_name = face_db["names"][face_num]
        face_db["names"][face_num] = new_name
        save_face_database(face_db)

        await update.message.reply_text(
            f"–õ–∏—Ü–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ:\n"
            f"–ë—ã–ª–æ: {old_name}\n"
            f"–°—Ç–∞–ª–æ: {new_name}"
        )

    except ValueError:
        await update.message.reply_text("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")


async def clear_faces(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyboard = [
        [InlineKeyboardButton("–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_confirm")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="clear_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ª–∏—Ü–∞?",
        reply_markup=reply_markup
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "clear_confirm":
        # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —á–∏—Å—Ç—É—é –±–∞–∑—É
        new_db = {"features": [], "names": []}
        save_face_database(new_db)

        await query.edit_message_text("‚úÖ –í—Å–µ –ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    elif query.data == "clear_cancel":
        await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")

async def name_face(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /nameface <–∏–º—è>")
        return

    face_db = load_face_database()
    if not face_db["features"]:
        await update.message.reply_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–∏—Ü.")
        return

    new_name = ' '.join(context.args)
    face_db["names"][-1] = new_name
    save_face_database(face_db)
    await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ª–∏—Ü–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {new_name}")


if __name__ == "__main__":
    TOKEN = "8006388827:AAGg4xPDWHjQ8aaS30-fSy97YK7jBUUabgQ"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω
    try:
        app = Application.builder().token(TOKEN).build()

        app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("nameface", name_face))
        app.add_handler(CommandHandler("listfaces", list_faces))
        app.add_handler(CommandHandler("renameface", rename_face))
        app.add_handler(CommandHandler("clearfaces", clear_faces))
        app.add_handler(CommandHandler("gym_task", gym_task))
        app.add_handler(CallbackQueryHandler(button_handler))

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        app.run_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
