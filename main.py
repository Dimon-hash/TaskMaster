import os
import pickle
import cv2
import json
import base64

from openai import OpenAI
from PIL import Image

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    CallbackQueryHandler
)

import urllib.request

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ OpenAI
client = OpenAI(
    api_key="sk-aitunnel-omeCzGWxkHPU0cPnADKnWe481LTigfBf",
    base_url="https://api.aitunnel.ru/v1/",
)



# --- –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∑–∞–¥–∞–Ω–∏–π —á–µ—Ä–µ–∑ GPT ---
async def generate_gpt_task():
    prompt = """
    –ü—Ä–∏–¥—É–º–∞–π –ø—Ä–æ—Å—Ç–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è —Å–ø–æ—Ä—Ç–∑–∞–ª–∞, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ñ–æ—Ç–æ. –£—Å–ª–æ–≤–∏—è:
    1. –ò—Å–ø–æ–ª—å–∑—É–π –û–î–ò–ù –≤–∏–¥ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è (—à—Ç–∞–Ω–≥–∞, –≥–∞–Ω—Ç–µ–ª–∏, —Ç—Ä–µ–Ω–∞–∂–µ—Ä).
    2. –£–∫–∞–∂–∏ —Ç–æ–ª—å–∫–æ –û–î–ù–£ –¥–µ—Ç–∞–ª—å (–≤–µ—Å/–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ/–ø–æ–ª–æ–∂–µ–Ω–∏–µ).
    3. –§–æ—Ä–º–∞—Ç: "–°–¥–µ–ª–∞–π [–¥–µ–π—Å—Ç–≤–∏–µ] —Å [–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å] + [–¥–µ—Ç–∞–ª—å]".
    4. –ò–∑–±–µ–≥–∞–π —Å–ª–æ–∂–Ω—ã—Ö —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–æ–∫ –∏ –∑–∞–¥–∞–Ω–∏–π.
    5. –ü—Ä–∏–º–µ—Ä—ã —Ö–æ—Ä–æ—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π:
       - "—Ñ–æ—Ç–æ –≥–∞–Ω—Ç–µ–ª–µ–π 10 –∫–≥"
       - "–§–æ—Ç–æ –∂–∏–º–∞ —à—Ç–∞–Ω–≥–∏ 50 –∫–≥"
    6. –ó–∞–¥–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –æ–¥–Ω–æ –∫–æ—Ä–æ—Ç–∫–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ.
    7. –°–¥–µ–ª–∞–π –ø–æ–Ω—è—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ

    """
    try:
        response = client.chat.completions.create(
            model="gpt-4.1",
            messages=[{"role": "user", "content": prompt}],
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ OpenAI: {e}")
        return "—Ñ–æ—Ç–æ –≥–∞–Ω—Ç–µ–ª–µ–π 12 –∫–≥ –≤ –ø—Ä–∞–≤–æ–π —Ä—É–∫–µ."


# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è —á–µ—Ä–µ–∑ –Ω–µ–π—Ä–æ—Å–µ—Ç—å ---
async def check_task_completion(task_text: str, image_path: str) -> (bool, str):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å –ø–æ–º–æ—â—å—é –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏ GPT-4o
    Args:
        task_text: –¢–µ–∫—Å—Ç –∑–∞–¥–∞–Ω–∏—è
        image_path: –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    Returns:
        tuple: (success: bool, explanation: str)
    """
    try:
        # –ö–æ–¥–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
        with open(image_path, "rb") as image_file:
            encoded_image = base64.b64encode(image_file.read()).decode('utf-8')

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
       ,
        # - –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–µ—Ç–∞–ª–µ–π (–≤–µ—Å, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)


        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç–µ–∫—Å—Ç –≤ –º—É–ª—å—Ç–∏–º–æ–¥–∞–ª—å–Ω—É—é –º–æ–¥–µ–ª—å
        response = client.chat.completions.create(
            model="gpt-4o",
            messages=[
                {"role": "system", "content": system_prompt},
                {
                    "role": "user",
                    "content": [
                        {"type": "text", "text": user_prompt},
                        {
                            "type": "image_url",
                            "image_url": {
                                "url": f"data:image/jpeg;base64,{encoded_image}"
                            }
                        }
                    ]
                }
            ],
            response_format={"type": "json_object"},
            max_tokens=300
        )

        # –ü–∞—Ä—Å–∏–º –æ—Ç–≤–µ—Ç
        result = json.loads(response.choices[0].message.content)
        return result.get("success", False), result.get("reason", "")

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è: {e}")
        return False, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"

# --- –ö–æ–º–∞–Ω–¥–∞ /gym_task ---
async def gym_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    task = await generate_gpt_task()
    clean_task = task.replace("*", "").replace("_", "").replace("`", "")

    try:
        await update.message.reply_text(
            f"üéØ *–í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:*\n\n{clean_task}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!",
            parse_mode="Markdown"
        )
    except Exception:
        await update.message.reply_text(
            f"üéØ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ:\n\n{clean_task}\n\n"
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏!"
        )

    context.user_data["current_task"] = clean_task


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Å –∑–∞–¥–∞–Ω–∏–µ–º ---
async def handle_photo_with_task(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if "current_task" not in context.user_data:
        await update.message.reply_text("–°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ —á–µ—Ä–µ–∑ /gym_task")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ
    photo_file = await update.message.photo[-1].get_file()
    photo_path = f"temp_{update.message.message_id}.jpg"
    await photo_file.download_to_drive(photo_path)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
    task_text = context.user_data["current_task"]
    success, reason = await check_task_completion(task_text, photo_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    if success:
        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: {task_text}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
        )
    else:
        await update.message.reply_text(
            f"‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n"
            f"–ó–∞–¥–∞–Ω–∏–µ: {task_text}\n"
            f"–ü—Ä–∏—á–∏–Ω–∞: {reason}\n\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑!"
        )

    # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    os.remove(photo_path)


# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ ---
def init_face_cascade():
    cascade_path = "haarcascade_frontalface_default.xml"

    if os.path.exists(cascade_path):
        classifier = cv2.CascadeClassifier(cascade_path)
        if not classifier.empty():
            return classifier

    try:
        opencv_path = os.path.join(cv2.data.haarcascades, cascade_path)
        if os.path.exists(opencv_path):
            classifier = cv2.CascadeClassifier(opencv_path)
            if not classifier.empty():
                return classifier
    except Exception:
        pass

    try:
        url = "https://raw.githubusercontent.com/opencv/opencv/master/data/haarcascades/haarcascade_frontalface_default.xml"
        urllib.request.urlretrieve(url, cascade_path)
        classifier = cv2.CascadeClassifier(cascade_path)
        if not classifier.empty():
            return classifier
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Å–∫–∞–¥–Ω—ã–π –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä: {e}")

    return None


face_cascade = init_face_cascade()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü
FACE_DATA_DIR = "face_data"
os.makedirs(FACE_DATA_DIR, exist_ok=True)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏—Ü–∞–º–∏
def load_face_database():
    try:
        with open(os.path.join(FACE_DATA_DIR, "faces.pkl"), "rb") as f:
            return pickle.load(f)
    except (FileNotFoundError, EOFError):
        return {"features": [], "names": []}


def save_face_database(database):
    with open(os.path.join(FACE_DATA_DIR, "faces.pkl"), "wb") as f:
        pickle.dump(database, f)


def extract_face_features(image, face):
    (x, y, w, h) = face
    face_roi = image[y:y + h, x:x + w]
    return cv2.resize(face_roi, (100, 100)).flatten()


def compare_faces(features1, features2, threshold=0.7):
    mse = ((features1 - features2) ** 2).mean()
    return mse < threshold


def draw_faces(image_path, faces, names):
    image = cv2.imread(image_path)
    for (x, y, w, h), name in zip(faces, names):
        cv2.rectangle(image, (x, y), (x + w, y + h), (0, 255, 0), 2)
        cv2.putText(image, name, (x, y - 10),
                    cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
    output_path = "output_" + os.path.basename(image_path)
    cv2.imwrite(output_path, image)
    return output_path


# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É:\n"
        "1. –î–∞–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å–ø–æ—Ä—Ç–∑–∞–ª–∞ (/gym_task)\n"
        "2. –ü—Ä–æ–≤–µ—Ä—è—Ç—å –∏—Ö –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (–æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ –ø–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è)\n"
        "3. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –ª–∏—Ü–∞ (/nameface, /listfaces, /renameface)"
    )


async def list_faces(update: Update, context: ContextTypes.DEFAULT_TYPE):
    face_db = load_face_database()
    if not face_db["names"]:
        await update.message.reply_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–∏—Ü.")
        return

    faces_list = "\n".join(f"{i + 1}. {name}" for i, name in enumerate(face_db["names"]))
    await update.message.reply_text("–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –ª–∏—Ü–∞:\n" + faces_list)


async def rename_face(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) < 2:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /renameface <–Ω–æ–º–µ—Ä> <–Ω–æ–≤–æ–µ_–∏–º—è>")
        return

    try:
        face_num = int(context.args[0]) - 1
        new_name = ' '.join(context.args[1:])
        face_db = load_face_database()

        if face_num < 0 or face_num >= len(face_db["names"]):
            await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä –ª–∏—Ü–∞!")
            return

        old_name = face_db["names"][face_num]
        face_db["names"][face_num] = new_name
        save_face_database(face_db)

        await update.message.reply_text(f"–õ–∏—Ü–æ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–æ:\n–ë—ã–ª–æ: {old_name}\n–°—Ç–∞–ª–æ: {new_name}")
    except ValueError:
        await update.message.reply_text("–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {str(e)}")


async def clear_faces(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–î–∞, –æ—á–∏—Å—Ç–∏—Ç—å", callback_data="clear_confirm")],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data="clear_cancel")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–µ –ª–∏—Ü–∞?", reply_markup=reply_markup)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "clear_confirm":
        new_db = {"features": [], "names": []}
        save_face_database(new_db)
        await query.edit_message_text("‚úÖ –í—Å–µ –ª–∏—Ü–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!")
    elif query.data == "clear_cancel":
        await query.edit_message_text("‚ùå –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")


async def name_face(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /nameface <–∏–º—è>")
        return

    face_db = load_face_database()
    if not face_db["features"]:
        await update.message.reply_text("–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –ª–∏—Ü.")
        return

    new_name = ' '.join(context.args)
    face_db["names"][-1] = new_name
    save_face_database(face_db)
    await update.message.reply_text(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ª–∏—Ü–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –∫–∞–∫: {new_name}")


if __name__ == "__main__":
    TOKEN = "8006388827:AAGg4xPDWHjQ8aaS30-fSy97YK7jBUUabgQ"
    try:
        app = Application.builder().token(TOKEN).build()

        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("gym_task", gym_task))
        app.add_handler(MessageHandler(filters.PHOTO & ~filters.COMMAND, handle_photo_with_task))
        app.add_handler(CommandHandler("nameface", name_face))
        app.add_handler(CommandHandler("listfaces", list_faces))
        app.add_handler(CommandHandler("renameface", rename_face))
        app.add_handler(CommandHandler("clearfaces", clear_faces))
        app.add_handler(CallbackQueryHandler(button_handler))

        print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        app.run_polling()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
